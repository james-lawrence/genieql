package generated

import (
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

// IntStaticColumns generated by genieql
const IntStaticColumns = `"arg1"`

// NewIntStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewIntStatic(rows *sql.Rows, err error) Int {
	if err != nil {
		return errInt{e: err}
	}

	return intStatic{
		Rows: rows,
	}
}

// intStatic generated by genieql
type intStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t intStatic) Scan(arg1 *int) error {
	var (
		c0 pgtype.Int8
	)

	if err := t.Rows.Scan(&c0); err != nil {
		return err
	}

	if err := c0.AssignTo(arg1); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t intStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t intStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t intStatic) Next() bool {
	return t.Rows.Next()
}

// NewIntStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewIntStaticRow(row *sql.Row) IntStaticRow {
	return IntStaticRow{
		row: row,
	}
}

// IntStaticRow generated by genieql
type IntStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t IntStaticRow) Scan(arg1 *int) error {
	var (
		c0 pgtype.Int8
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0); err != nil {
		return err
	}

	if err := c0.AssignTo(arg1); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t IntStaticRow) Err(err error) IntStaticRow {
	t.err = err
	return t
}
