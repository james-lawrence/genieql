package generated

import (
	"database/sql"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

// JSON scanner interface.
type JSON interface {
	Scan(arg1 *json.RawMessage) error
	Next() bool
	Close() error
	Err() error
}

type errJSON struct {
	e error
}

func (t errJSON) Scan(arg1 *json.RawMessage) error {
	return t.e
}

func (t errJSON) Next() bool {
	return false
}

func (t errJSON) Err() error {
	return t.e
}

func (t errJSON) Close() error {
	return nil
}

// JSONStaticColumns generated by genieql
const JSONStaticColumns = `"arg1"`

// NewJSONStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewJSONStatic(rows *sql.Rows, err error) JSON {
	if err != nil {
		return errJSON{e: err}
	}

	return jSONStatic{
		Rows: rows,
	}
}

// jSONStatic generated by genieql
type jSONStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t jSONStatic) Scan(arg1 *json.RawMessage) error {
	var (
		c0 pgtype.JSON
	)

	if err := t.Rows.Scan(&c0); err != nil {
		return err
	}

	if err := c0.AssignTo(arg1); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t jSONStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t jSONStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t jSONStatic) Next() bool {
	return t.Rows.Next()
}

// NewJSONStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewJSONStaticRow(row *sql.Row) JSONStaticRow {
	return JSONStaticRow{
		row: row,
	}
}

// JSONStaticRow generated by genieql
type JSONStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t JSONStaticRow) Scan(arg1 *json.RawMessage) error {
	var (
		c0 pgtype.JSON
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0); err != nil {
		return err
	}

	if err := c0.AssignTo(arg1); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t JSONStaticRow) Err(err error) JSONStaticRow {
	t.err = err
	return t
}
