//go:build !genieql.ignore
// +build !genieql.ignore

package example1

import (
	"context"
	"database/sql"
	"math"
	"net"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/james-lawrence/genieql/internal/sqlx"
)

// DO NOT EDIT: This File was auto generated by the following command:
// genieql

// Example1 generated by genieql
type Example1 struct {
	BigintField          int
	BoolField            bool
	CidrField            netip.Prefix
	DecimalField         float64
	DoublePrecisionField float64
	InetField            netip.Addr
	Int2Array            []int
	Int4Array            []int
	Int8Array            []int
	IntField             int
	IntervalField        time.Duration
	MacaddrField         net.HardwareAddr
	NumericField         float64
	RealField            float32
	SmallintField        int
	TextField            string
	TimestampField       time.Time
	UUIDArray            []string
	UUIDField            string
}

// Example2 generated by genieql
type Example2 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example1Scanner scanner interface.
type Example1Scanner interface {
	Scan(i *Example1) error
	Next() bool
	Close() error
	Err() error
}

type errExample1Scanner struct {
	e error
}

func (t errExample1Scanner) Scan(i *Example1) error {
	return t.e
}

func (t errExample1Scanner) Next() bool {
	return false
}

func (t errExample1Scanner) Err() error {
	return t.e
}

func (t errExample1Scanner) Close() error {
	return nil
}

// Example1ScannerStaticColumns generated by genieql
const Example1ScannerStaticColumns = `"bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample1ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample1ScannerStatic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerStatic{
		Rows: rows,
	}
}

// example1ScannerStatic generated by genieql
type example1ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerStatic) Scan(i *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		i.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		i.BoolField = vc1.(bool)
	}

	i.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		i.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		i.DoublePrecisionField = vc4.(float64)
	}

	i.InetField = c5

	i.Int2Array = c6

	i.Int4Array = c7

	i.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		i.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		i.IntervalField = vc10.(time.Duration)
	}

	i.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		i.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		i.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		i.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		i.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		i.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		i.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			i.TimestampField = vc16.(time.Time)
		}
	}

	i.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		i.UUIDField = vc18.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample1ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample1ScannerStaticRow(row *sql.Row) Example1ScannerStaticRow {
	return Example1ScannerStaticRow{
		row: row,
	}
}

// Example1ScannerStaticRow generated by genieql
type Example1ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example1ScannerStaticRow) Scan(i *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		i.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		i.BoolField = vc1.(bool)
	}

	i.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		i.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		i.DoublePrecisionField = vc4.(float64)
	}

	i.InetField = c5

	i.Int2Array = c6

	i.Int4Array = c7

	i.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		i.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		i.IntervalField = vc10.(time.Duration)
	}

	i.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		i.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		i.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		i.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		i.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		i.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		i.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			i.TimestampField = vc16.(time.Time)
		}
	}

	i.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		i.UUIDField = vc18.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t Example1ScannerStaticRow) Err(err error) Example1ScannerStaticRow {
	t.err = err
	return t
}

// NewExample1ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample1ScannerDynamic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerDynamic{
		Rows: rows,
	}
}

// example1ScannerDynamic generated by genieql
type example1ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerDynamic) Scan(i *Example1) error {
	const (
		cn0  = "bigint_field"
		cn1  = "bool_field"
		cn2  = "cidr_field"
		cn3  = "decimal_field"
		cn4  = "double_precision_field"
		cn5  = "inet_field"
		cn6  = "int2_array"
		cn7  = "int4_array"
		cn8  = "int8_array"
		cn9  = "int_field"
		cn10 = "interval_field"
		cn11 = "macaddr_field"
		cn12 = "numeric_field"
		cn13 = "real_field"
		cn14 = "smallint_field"
		cn15 = "text_field"
		cn16 = "timestamp_field"
		cn17 = "uuid_array"
		cn18 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Bool
		c2      netip.Prefix
		c3      pgtype.Numeric
		c4      pgtype.Float8
		c5      netip.Addr
		c6      []int
		c7      []int
		c8      []int
		c9      pgtype.Int4
		c10     pgtype.Interval
		c11     net.HardwareAddr
		c12     pgtype.Numeric
		c13     pgtype.Float4
		c14     pgtype.Int2
		c15     pgtype.Text
		c16     pgtype.Timestamptz
		c17     []string
		c18     pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		case cn7:
			dst = append(dst, &c7)
		case cn8:
			dst = append(dst, &c8)
		case cn9:
			dst = append(dst, &c9)
		case cn10:
			dst = append(dst, &c10)
		case cn11:
			dst = append(dst, &c11)
		case cn12:
			dst = append(dst, &c12)
		case cn13:
			dst = append(dst, &c13)
		case cn14:
			dst = append(dst, &c14)
		case cn15:
			dst = append(dst, &c15)
		case cn16:
			dst = append(dst, &c16)
		case cn17:
			dst = append(dst, &c17)
		case cn18:
			dst = append(dst, &c18)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if vc0, err := c0.Value(); err != nil {
				return err
			} else {
				i.BigintField = vc0.(int)
			}

		case cn1:
			if vc1, err := c1.Value(); err != nil {
				return err
			} else {
				i.BoolField = vc1.(bool)
			}

		case cn2:
			i.CidrField = c2

		case cn3:
			if vc3, err := c3.Value(); err != nil {
				return err
			} else {
				i.DecimalField = vc3.(float64)
			}

		case cn4:
			if vc4, err := c4.Value(); err != nil {
				return err
			} else {
				i.DoublePrecisionField = vc4.(float64)
			}

		case cn5:
			i.InetField = c5

		case cn6:
			i.Int2Array = c6

		case cn7:
			i.Int4Array = c7

		case cn8:
			i.Int8Array = c8

		case cn9:
			if vc9, err := c9.Value(); err != nil {
				return err
			} else {
				i.IntField = vc9.(int)
			}

		case cn10:
			if vc10, err := c10.Value(); err != nil {
				return err
			} else {
				i.IntervalField = vc10.(time.Duration)
			}

		case cn11:
			i.MacaddrField = c11

		case cn12:
			if vc12, err := c12.Value(); err != nil {
				return err
			} else {
				i.NumericField = vc12.(float64)
			}

		case cn13:
			if vc13, err := c13.Value(); err != nil {
				return err
			} else {
				i.RealField = vc13.(float32)
			}

		case cn14:
			if vc14, err := c14.Value(); err != nil {
				return err
			} else {
				i.SmallintField = vc14.(int)
			}

		case cn15:
			if vc15, err := c15.Value(); err != nil {
				return err
			} else {
				i.TextField = vc15.(string)
			}

		case cn16:
			switch c16.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				i.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				i.TimestampField = tmp
			default:
				if vc16, err := c16.Value(); err != nil {
					return err
				} else {
					i.TimestampField = vc16.(time.Time)
				}
			}

		case cn17:
			i.UUIDArray = c17

		case cn18:
			if vc18, err := c18.Value(); err != nil {
				return err
			} else {
				i.UUIDField = vc18.(string)
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// ExampleComboScanner scanner interface.
type ExampleComboScanner interface {
	Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errExampleComboScanner struct {
	e error
}

func (t errExampleComboScanner) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	return t.e
}

func (t errExampleComboScanner) Next() bool {
	return false
}

func (t errExampleComboScanner) Err() error {
	return t.e
}

func (t errExampleComboScanner) Close() error {
	return nil
}

// NewExampleComboScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExampleComboScannerStatic(rows *sql.Rows, err error) ExampleComboScanner {
	if err != nil {
		return errExampleComboScanner{e: err}
	}

	return exampleComboScannerStatic{
		Rows: rows,
	}
}

// exampleComboScannerStatic generated by genieql
type exampleComboScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t exampleComboScannerStatic) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Timestamptz
		c2  pgtype.Int8
		c3  pgtype.Bool
		c4  netip.Prefix
		c5  pgtype.Numeric
		c6  pgtype.Float8
		c7  netip.Addr
		c8  []int
		c9  []int
		c10 []int
		c11 pgtype.Int4
		c12 pgtype.Interval
		c13 net.HardwareAddr
		c14 pgtype.Numeric
		c15 pgtype.Float4
		c16 pgtype.Int2
		c17 pgtype.Text
		c18 pgtype.Timestamptz
		c19 []string
		c20 pgtype.UUID
		c21 pgtype.Bool
		c22 []int
		c23 []int
		c24 pgtype.Text
		c25 pgtype.Timestamptz
		c26 []string
		c27 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		*i = vc0.(int)
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*ts = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*ts = tmp
	default:
		if vc1, err := c1.Value(); err != nil {
			return err
		} else {
			*ts = vc1.(time.Time)
		}
	}

	if vc2, err := c2.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc2.(int)
	}

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc3.(bool)
	}

	e1.CidrField = c4

	if vc5, err := c5.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc5.(float64)
	}

	if vc6, err := c6.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc6.(float64)
	}

	e1.InetField = c7

	e1.Int2Array = c8

	e1.Int4Array = c9

	e1.Int8Array = c10

	if vc11, err := c11.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc11.(int)
	}

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc12.(time.Duration)
	}

	e1.MacaddrField = c13

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc14.(float64)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc15.(float32)
	}

	if vc16, err := c16.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc16.(int)
	}

	if vc17, err := c17.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc17.(string)
	}

	switch c18.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc18, err := c18.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc18.(time.Time)
		}
	}

	e1.UUIDArray = c19

	if vc20, err := c20.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc20.(string)
	}

	if vc21, err := c21.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc21.(bool)
	}

	e2.Int4Array = c22

	e2.Int8Array = c23

	if vc24, err := c24.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc24.(string)
	}

	switch c25.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc25, err := c25.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc25.(time.Time)
		}
	}

	e2.UUIDArray = c26

	if vc27, err := c27.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc27.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t exampleComboScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t exampleComboScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t exampleComboScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExampleComboScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExampleComboScannerStaticRow(row *sql.Row) ExampleComboScannerStaticRow {
	return ExampleComboScannerStaticRow{
		row: row,
	}
}

// ExampleComboScannerStaticRow generated by genieql
type ExampleComboScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t ExampleComboScannerStaticRow) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Timestamptz
		c2  pgtype.Int8
		c3  pgtype.Bool
		c4  netip.Prefix
		c5  pgtype.Numeric
		c6  pgtype.Float8
		c7  netip.Addr
		c8  []int
		c9  []int
		c10 []int
		c11 pgtype.Int4
		c12 pgtype.Interval
		c13 net.HardwareAddr
		c14 pgtype.Numeric
		c15 pgtype.Float4
		c16 pgtype.Int2
		c17 pgtype.Text
		c18 pgtype.Timestamptz
		c19 []string
		c20 pgtype.UUID
		c21 pgtype.Bool
		c22 []int
		c23 []int
		c24 pgtype.Text
		c25 pgtype.Timestamptz
		c26 []string
		c27 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		*i = vc0.(int)
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*ts = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*ts = tmp
	default:
		if vc1, err := c1.Value(); err != nil {
			return err
		} else {
			*ts = vc1.(time.Time)
		}
	}

	if vc2, err := c2.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc2.(int)
	}

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc3.(bool)
	}

	e1.CidrField = c4

	if vc5, err := c5.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc5.(float64)
	}

	if vc6, err := c6.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc6.(float64)
	}

	e1.InetField = c7

	e1.Int2Array = c8

	e1.Int4Array = c9

	e1.Int8Array = c10

	if vc11, err := c11.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc11.(int)
	}

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc12.(time.Duration)
	}

	e1.MacaddrField = c13

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc14.(float64)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc15.(float32)
	}

	if vc16, err := c16.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc16.(int)
	}

	if vc17, err := c17.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc17.(string)
	}

	switch c18.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc18, err := c18.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc18.(time.Time)
		}
	}

	e1.UUIDArray = c19

	if vc20, err := c20.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc20.(string)
	}

	if vc21, err := c21.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc21.(bool)
	}

	e2.Int4Array = c22

	e2.Int8Array = c23

	if vc24, err := c24.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc24.(string)
	}

	switch c25.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc25, err := c25.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc25.(time.Time)
		}
	}

	e2.UUIDArray = c26

	if vc27, err := c27.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc27.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t ExampleComboScannerStaticRow) Err(err error) ExampleComboScannerStaticRow {
	t.err = err
	return t
}

// Example1Insert1StaticColumns generated by genieql
const Example1Insert1StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT`

// Example1Insert1Explode generated by genieql
func Example1Insert1Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string           // uuid_array
	)

	if err := c0.Scan(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Scan(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	c2 = a.CidrField

	if err := c3.Scan(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Scan(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	c5 = a.InetField

	c6 = a.Int2Array

	c7 = a.Int4Array

	c8 = a.Int8Array

	if err := c9.Scan(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Scan(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	c11 = a.MacaddrField

	if err := c12.Scan(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Scan(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Scan(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Scan(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c16.Scan(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	c17 = a.UUIDArray

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17}, nil
}

// Example1Insert1 generated by genieql
func Example1Insert1(ctx context.Context, q sqlx.Queryer, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT) RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string
	)
	if err := c0.Scan(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Scan(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c2 = a.CidrField
	if err := c3.Scan(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Scan(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c5 = a.InetField
	c6 = a.Int2Array
	c7 = a.Int4Array
	c8 = a.Int8Array
	if err := c9.Scan(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Scan(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c11 = a.MacaddrField
	if err := c12.Scan(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Scan(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Scan(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Scan(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c16.Scan(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	c17 = a.UUIDArray // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17))
}

// Example1Insert2StaticColumns generated by genieql
const Example1Insert2StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT`

// Example1Insert2Explode generated by genieql
func Example1Insert2Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string           // uuid_array
	)

	if err := c0.Scan(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Scan(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	c2 = a.CidrField

	if err := c3.Scan(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Scan(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	c5 = a.InetField

	c6 = a.Int2Array

	c7 = a.Int4Array

	c8 = a.Int8Array

	if err := c9.Scan(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Scan(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	c11 = a.MacaddrField

	if err := c12.Scan(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Scan(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Scan(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Scan(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c16.Scan(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	c17 = a.UUIDArray

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17}, nil
}

// Example1Insert2 generated by genieql
func Example1Insert2(ctx context.Context, q sqlx.Queryer, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT) RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string
	)
	if err := c0.Scan(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Scan(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c2 = a.CidrField
	if err := c3.Scan(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Scan(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c5 = a.InetField
	c6 = a.Int2Array
	c7 = a.Int4Array
	c8 = a.Int8Array
	if err := c9.Scan(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Scan(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c11 = a.MacaddrField
	if err := c12.Scan(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Scan(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Scan(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Scan(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c16.Scan(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	c17 = a.UUIDArray // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17))
}

// Example1Insert3StaticColumns generated by genieql
const Example1Insert3StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT`

// Example1Insert3Explode generated by genieql
func Example1Insert3Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string           // uuid_array
	)

	if err := c0.Scan(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Scan(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	c2 = a.CidrField

	if err := c3.Scan(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Scan(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	c5 = a.InetField

	c6 = a.Int2Array

	c7 = a.Int4Array

	c8 = a.Int8Array

	if err := c9.Scan(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Scan(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	c11 = a.MacaddrField

	if err := c12.Scan(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Scan(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Scan(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Scan(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c16.Scan(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	c17 = a.UUIDArray

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17}, nil
}

// Example1Insert3 generated by genieql
func Example1Insert3(ctx context.Context, q sqlx.Queryer, id int, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,DEFAULT) ON CONFLICT id = $1 AND b = $2 WHERE id = $1 RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array"`
	var (
		c0  pgtype.Int8        // id
		c1  pgtype.Int8        // bigint_field
		c2  pgtype.Bool        // bool_field
		c3  netip.Prefix       // cidr_field
		c4  pgtype.Numeric     // decimal_field
		c5  pgtype.Float8      // double_precision_field
		c6  netip.Addr         // inet_field
		c7  []int              // int2_array
		c8  []int              // int4_array
		c9  []int              // int8_array
		c10 pgtype.Int4        // int_field
		c11 pgtype.Interval    // interval_field
		c12 net.HardwareAddr   // macaddr_field
		c13 pgtype.Numeric     // numeric_field
		c14 pgtype.Float4      // real_field
		c15 pgtype.Int2        // smallint_field
		c16 pgtype.Text        // text_field
		c17 pgtype.Timestamptz // timestamp_field
		c18 []string
	)
	if err := c0.Scan(id); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Scan(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c2.Scan(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c3 = a.CidrField
	if err := c4.Scan(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c5.Scan(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c6 = a.InetField
	c7 = a.Int2Array
	c8 = a.Int4Array
	c9 = a.Int8Array
	if err := c10.Scan(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c11.Scan(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c12 = a.MacaddrField
	if err := c13.Scan(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Scan(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Scan(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c16.Scan(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c17.Scan(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c17.Scan(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c17.Scan(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	c18 = a.UUIDArray // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18))
}

// Example1InsertBatch1 generated by genieql
func NewExample1InsertBatch1(ctx context.Context, q sqlx.Queryer, a ...Example1) Example1Scanner {
	return &example1InsertBatch1{ctx: ctx, q: q, remaining: a}
}

type example1InsertBatch1 struct {
	ctx       context.Context
	q         sqlx.Queryer
	remaining []Example1
	scanner   Example1Scanner
}

func (t *example1InsertBatch1) Scan(a *Example1) error {
	return t.scanner.Scan(a)
}

func (t *example1InsertBatch1) Err() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Err()
}

func (t *example1InsertBatch1) Close() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Close()
}

func (t *example1InsertBatch1) Next() bool {
	var advanced bool
	if t.scanner != nil && t.scanner.Next() {
		return true
	}
	if len(t.remaining) > 0 && t.Close() == nil {
		t.scanner, t.remaining, advanced = t.advance(t.remaining...)
		return advanced && t.scanner.Next()
	}
	return false
}

func (t *example1InsertBatch1) advance(a ...Example1) (Example1Scanner, []Example1, bool) {
	transform := func(a Example1) (c0 pgtype.Int8, c1 pgtype.Bool, c2 netip.Prefix, c3 pgtype.Numeric, c4 pgtype.Float8, c5 netip.Addr, c6 []int, c7 []int, c8 []int, c9 pgtype.Int4, c10 pgtype.Interval, c11 net.HardwareAddr, c12 pgtype.Numeric, c13 pgtype.Float4, c14 pgtype.Int2, c15 pgtype.Text, c16 pgtype.Timestamptz, c17 []string, c18 pgtype.UUID, err error) {
		if err := c0.Scan(a.BigintField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c1.Scan(a.BoolField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		c2 = a.CidrField
		if err := c3.Scan(a.DecimalField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c4.Scan(a.DoublePrecisionField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		c5 = a.InetField
		c6 = a.Int2Array
		c7 = a.Int4Array
		c8 = a.Int8Array
		if err := c9.Scan(a.IntField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c10.Scan(a.IntervalField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		c11 = a.MacaddrField
		if err := c12.Scan(a.NumericField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c13.Scan(a.RealField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c14.Scan(a.SmallintField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		if err := c15.Scan(a.TextField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		switch a.TimestampField {
		case time.Unix(math.MaxInt64-62135596800, 999999999):
			if err := c16.Scan(pgtype.Infinity); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
			}
		case time.Unix(math.MinInt64, math.MinInt64):
			if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
			}
		default:
			if err := c16.Scan(a.TimestampField); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
			}
		}
		c17 = a.UUIDArray
		if err := c18.Scan(a.UUIDField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, err
		}
		return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, nil
	}
	switch len(a) {
	case 0:
		return nil, []Example1(nil), false
	case 1:
		const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19) RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		var (
			r0c0  pgtype.Int8
			r0c1  pgtype.Bool
			r0c2  netip.Prefix
			r0c3  pgtype.Numeric
			r0c4  pgtype.Float8
			r0c5  netip.Addr
			r0c6  []int
			r0c7  []int
			r0c8  []int
			r0c9  pgtype.Int4
			r0c10 pgtype.Interval
			r0c11 net.HardwareAddr
			r0c12 pgtype.Numeric
			r0c13 pgtype.Float4
			r0c14 pgtype.Int2
			r0c15 pgtype.Text
			r0c16 pgtype.Timestamptz
			r0c17 []string
			r0c18 pgtype.UUID
			err   error
		)
		if r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, err = transform(a[0]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		return NewExample1ScannerStatic(t.q.QueryContext(t.ctx, query, r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18)), a[1:], true
	default:
		const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19),($20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38) RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		var (
			r0c0  pgtype.Int8
			r0c1  pgtype.Bool
			r0c2  netip.Prefix
			r0c3  pgtype.Numeric
			r0c4  pgtype.Float8
			r0c5  netip.Addr
			r0c6  []int
			r0c7  []int
			r0c8  []int
			r0c9  pgtype.Int4
			r0c10 pgtype.Interval
			r0c11 net.HardwareAddr
			r0c12 pgtype.Numeric
			r0c13 pgtype.Float4
			r0c14 pgtype.Int2
			r0c15 pgtype.Text
			r0c16 pgtype.Timestamptz
			r0c17 []string
			r0c18 pgtype.UUID
			r1c0  pgtype.Int8
			r1c1  pgtype.Bool
			r1c2  netip.Prefix
			r1c3  pgtype.Numeric
			r1c4  pgtype.Float8
			r1c5  netip.Addr
			r1c6  []int
			r1c7  []int
			r1c8  []int
			r1c9  pgtype.Int4
			r1c10 pgtype.Interval
			r1c11 net.HardwareAddr
			r1c12 pgtype.Numeric
			r1c13 pgtype.Float4
			r1c14 pgtype.Int2
			r1c15 pgtype.Text
			r1c16 pgtype.Timestamptz
			r1c17 []string
			r1c18 pgtype.UUID
			err   error
		)
		if r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, err = transform(a[0]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		if r1c0, r1c1, r1c2, r1c3, r1c4, r1c5, r1c6, r1c7, r1c8, r1c9, r1c10, r1c11, r1c12, r1c13, r1c14, r1c15, r1c16, r1c17, r1c18, err = transform(a[1]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		return NewExample1ScannerStatic(t.q.QueryContext(t.ctx, query, r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, r1c0, r1c1, r1c2, r1c3, r1c4, r1c5, r1c6, r1c7, r1c8, r1c9, r1c10, r1c11, r1c12, r1c13, r1c14, r1c15, r1c16, r1c17, r1c18)), []Example1(nil), false
	}
}

// Example1Update1 generated by genieql
func Example1Update1(ctx context.Context, q sqlx.Queryer, i int, camelCaseID int, snakeCase int, e1 Example1, e2 Example2) Example1ScannerStaticRow {
	const query = `UPDATE example1 SET WHERE bigint_field = $1 RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var c0 pgtype.Int8 // bigint_field
	if err := c0.Scan(e1.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0))
}

// Example1Update2 generated by genieql
func Example1Update2(ctx context.Context, q sqlx.Queryer, i int, camelCaseID int, snakeCase int, e1 Example1, e2 Example2) Example1Scanner {
	const query = `UPDATE example1 SET WHERE bigint_field = $1 RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var c0 pgtype.Int8 // bigint_field
	if err := c0.Scan(e1.BigintField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c0))
}

// Example1Update3 generated by genieql
func Example1Update3(ctx context.Context, q sqlx.Queryer, i int, ts pgtype.Timestamp) Example1Scanner {
	const query = `UPDATE example2 SET WHERE id = $1 AND timestamp = $2 RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var c0 pgtype.Int8 // i
	if err := c0.Scan(i); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c0, ts))
}

// Example1FindByBigintField generated by genieql
// test simple function generation with field replacement
func Example1FindByBigintField(ctx context.Context, q sqlx.Queryer, p Example1) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "id" = $2 AND "id" = $1`
	var (
		c0 pgtype.Int8 // bigint_field
		c1 pgtype.Int4 // int_field
	)
	if err := c0.Scan(p.BigintField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	if err := c1.Scan(p.IntField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c0, c1))
}
