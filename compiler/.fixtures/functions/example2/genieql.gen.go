//go:build !genieql.ignore
// +build !genieql.ignore

package example2

import (
	"context"
	"database/sql"
	"math"
	"net"
	"time"

	"github.com/jackc/pgtype"
	"github.com/james-lawrence/genieql/internal/sqlx"
)

// DO NOT EDIT: This File was auto generated by the following command:
// genieql

// Example1 generated by genieql
type Example1 struct {
	BigintField          int
	BitField             []byte
	BitVaryingField      []byte
	BoolField            bool
	ByteArrayField       []byte
	CharacterField       string
	CharacterFixedField  string
	CidrField            net.IPNet
	DecimalField         float64
	DoublePrecisionField float64
	InetField            net.IP
	Int2Array            []int
	Int4Array            []int
	Int8Array            []int
	IntField             int
	IntervalField        time.Duration
	JSONField            []byte
	JsonbField           []byte
	MacaddrField         net.HardwareAddr
	NumericField         float64
	RealField            float32
	SmallintField        int
	TextField            string
	TimestampField       time.Time
	UUIDArray            []string
	UUIDField            string
}

// Example2 generated by genieql
type Example2 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example1Scanner scanner interface.
type Example1Scanner interface {
	Scan(i *Example1) error
	Next() bool
	Close() error
	Err() error
}

type errExample1Scanner struct {
	e error
}

func (t errExample1Scanner) Scan(i *Example1) error {
	return t.e
}

func (t errExample1Scanner) Next() bool {
	return false
}

func (t errExample1Scanner) Err() error {
	return t.e
}

func (t errExample1Scanner) Close() error {
	return nil
}

// Example1ScannerStaticColumns generated by genieql
const Example1ScannerStaticColumns = `"bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample1ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample1ScannerStatic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerStatic{
		Rows: rows,
	}
}

// example1ScannerStatic generated by genieql
type example1ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerStatic) Scan(i *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if err := c0.AssignTo(&i.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&i.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&i.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&i.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&i.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&i.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&i.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&i.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&i.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&i.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&i.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&i.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&i.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&i.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&i.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&i.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&i.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&i.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&i.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&i.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&i.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&i.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&i.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		i.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		i.TimestampField = tmp
	default:
		if err := c23.AssignTo(&i.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&i.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&i.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample1ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample1ScannerStaticRow(row *sql.Row) Example1ScannerStaticRow {
	return Example1ScannerStaticRow{
		row: row,
	}
}

// Example1ScannerStaticRow generated by genieql
type Example1ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example1ScannerStaticRow) Scan(i *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if err := c0.AssignTo(&i.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&i.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&i.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&i.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&i.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&i.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&i.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&i.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&i.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&i.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&i.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&i.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&i.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&i.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&i.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&i.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&i.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&i.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&i.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&i.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&i.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&i.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&i.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		i.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		i.TimestampField = tmp
	default:
		if err := c23.AssignTo(&i.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&i.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&i.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t Example1ScannerStaticRow) Err(err error) Example1ScannerStaticRow {
	t.err = err
	return t
}

// NewExample1ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample1ScannerDynamic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerDynamic{
		Rows: rows,
	}
}

// example1ScannerDynamic generated by genieql
type example1ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerDynamic) Scan(i *Example1) error {
	const (
		cn0  = "bigint_field"
		cn1  = "bit_field"
		cn2  = "bit_varying_field"
		cn3  = "bool_field"
		cn4  = "byte_array_field"
		cn5  = "character_field"
		cn6  = "character_fixed_field"
		cn7  = "cidr_field"
		cn8  = "decimal_field"
		cn9  = "double_precision_field"
		cn10 = "inet_field"
		cn11 = "int2_array"
		cn12 = "int4_array"
		cn13 = "int8_array"
		cn14 = "int_field"
		cn15 = "interval_field"
		cn16 = "json_field"
		cn17 = "jsonb_field"
		cn18 = "macaddr_field"
		cn19 = "numeric_field"
		cn20 = "real_field"
		cn21 = "smallint_field"
		cn22 = "text_field"
		cn23 = "timestamp_field"
		cn24 = "uuid_array"
		cn25 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Bit
		c2      pgtype.Varbit
		c3      pgtype.Bool
		c4      pgtype.Bytea
		c5      pgtype.Varchar
		c6      pgtype.BPChar
		c7      pgtype.CIDR
		c8      pgtype.Numeric
		c9      pgtype.Float8
		c10     pgtype.Inet
		c11     pgtype.Int2Array
		c12     pgtype.Int4Array
		c13     pgtype.Int8Array
		c14     pgtype.Int4
		c15     pgtype.Interval
		c16     pgtype.JSON
		c17     pgtype.JSONB
		c18     pgtype.Macaddr
		c19     pgtype.Numeric
		c20     pgtype.Float4
		c21     pgtype.Int2
		c22     pgtype.Text
		c23     pgtype.Timestamptz
		c24     pgtype.UUIDArray
		c25     pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		case cn7:
			dst = append(dst, &c7)
		case cn8:
			dst = append(dst, &c8)
		case cn9:
			dst = append(dst, &c9)
		case cn10:
			dst = append(dst, &c10)
		case cn11:
			dst = append(dst, &c11)
		case cn12:
			dst = append(dst, &c12)
		case cn13:
			dst = append(dst, &c13)
		case cn14:
			dst = append(dst, &c14)
		case cn15:
			dst = append(dst, &c15)
		case cn16:
			dst = append(dst, &c16)
		case cn17:
			dst = append(dst, &c17)
		case cn18:
			dst = append(dst, &c18)
		case cn19:
			dst = append(dst, &c19)
		case cn20:
			dst = append(dst, &c20)
		case cn21:
			dst = append(dst, &c21)
		case cn22:
			dst = append(dst, &c22)
		case cn23:
			dst = append(dst, &c23)
		case cn24:
			dst = append(dst, &c24)
		case cn25:
			dst = append(dst, &c25)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if err := c0.AssignTo(&i.BigintField); err != nil {
				return err
			}

		case cn1:
			if err := c1.AssignTo(&i.BitField); err != nil {
				return err
			}

		case cn2:
			if err := c2.AssignTo(&i.BitVaryingField); err != nil {
				return err
			}

		case cn3:
			if err := c3.AssignTo(&i.BoolField); err != nil {
				return err
			}

		case cn4:
			if err := c4.AssignTo(&i.ByteArrayField); err != nil {
				return err
			}

		case cn5:
			if err := c5.AssignTo(&i.CharacterField); err != nil {
				return err
			}

		case cn6:
			if err := c6.AssignTo(&i.CharacterFixedField); err != nil {
				return err
			}

		case cn7:
			if err := c7.AssignTo(&i.CidrField); err != nil {
				return err
			}

		case cn8:
			if err := c8.AssignTo(&i.DecimalField); err != nil {
				return err
			}

		case cn9:
			if err := c9.AssignTo(&i.DoublePrecisionField); err != nil {
				return err
			}

		case cn10:
			if err := c10.AssignTo(&i.InetField); err != nil {
				return err
			}

		case cn11:
			if err := c11.AssignTo(&i.Int2Array); err != nil {
				return err
			}

		case cn12:
			if err := c12.AssignTo(&i.Int4Array); err != nil {
				return err
			}

		case cn13:
			if err := c13.AssignTo(&i.Int8Array); err != nil {
				return err
			}

		case cn14:
			if err := c14.AssignTo(&i.IntField); err != nil {
				return err
			}

		case cn15:
			if err := c15.AssignTo(&i.IntervalField); err != nil {
				return err
			}

		case cn16:
			if err := c16.AssignTo(&i.JSONField); err != nil {
				return err
			}

		case cn17:
			if err := c17.AssignTo(&i.JsonbField); err != nil {
				return err
			}

		case cn18:
			if err := c18.AssignTo(&i.MacaddrField); err != nil {
				return err
			}

		case cn19:
			if err := c19.AssignTo(&i.NumericField); err != nil {
				return err
			}

		case cn20:
			if err := c20.AssignTo(&i.RealField); err != nil {
				return err
			}

		case cn21:
			if err := c21.AssignTo(&i.SmallintField); err != nil {
				return err
			}

		case cn22:
			if err := c22.AssignTo(&i.TextField); err != nil {
				return err
			}

		case cn23:
			switch c23.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				i.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				i.TimestampField = tmp
			default:
				if err := c23.AssignTo(&i.TimestampField); err != nil {
					return err
				}
			}

		case cn24:
			if err := c24.AssignTo(&i.UUIDArray); err != nil {
				return err
			}

		case cn25:
			if err := c25.AssignTo(&i.UUIDField); err != nil {
				return err
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// ExampleComboScanner scanner interface.
type ExampleComboScanner interface {
	Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errExampleComboScanner struct {
	e error
}

func (t errExampleComboScanner) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	return t.e
}

func (t errExampleComboScanner) Next() bool {
	return false
}

func (t errExampleComboScanner) Err() error {
	return t.e
}

func (t errExampleComboScanner) Close() error {
	return nil
}

// NewExampleComboScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExampleComboScannerStatic(rows *sql.Rows, err error) ExampleComboScanner {
	if err != nil {
		return errExampleComboScanner{e: err}
	}

	return exampleComboScannerStatic{
		Rows: rows,
	}
}

// exampleComboScannerStatic generated by genieql
type exampleComboScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t exampleComboScannerStatic) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Timestamptz
		c2  pgtype.Int8
		c3  pgtype.Bit
		c4  pgtype.Varbit
		c5  pgtype.Bool
		c6  pgtype.Bytea
		c7  pgtype.Varchar
		c8  pgtype.BPChar
		c9  pgtype.CIDR
		c10 pgtype.Numeric
		c11 pgtype.Float8
		c12 pgtype.Inet
		c13 pgtype.Int2Array
		c14 pgtype.Int4Array
		c15 pgtype.Int8Array
		c16 pgtype.Int4
		c17 pgtype.Interval
		c18 pgtype.JSON
		c19 pgtype.JSONB
		c20 pgtype.Macaddr
		c21 pgtype.Numeric
		c22 pgtype.Float4
		c23 pgtype.Int2
		c24 pgtype.Text
		c25 pgtype.Timestamptz
		c26 pgtype.UUIDArray
		c27 pgtype.UUID
		c28 pgtype.Bool
		c29 pgtype.Int4Array
		c30 pgtype.Int8Array
		c31 pgtype.Text
		c32 pgtype.Timestamptz
		c33 pgtype.UUIDArray
		c34 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34); err != nil {
		return err
	}

	if err := c0.AssignTo(i); err != nil {
		return err
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*ts = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*ts = tmp
	default:
		if err := c1.AssignTo(ts); err != nil {
			return err
		}
	}

	if err := c2.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c23.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c24.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c25.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c25.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c26.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c27.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c30.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c31.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c32.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c32.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c33.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c34.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t exampleComboScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t exampleComboScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t exampleComboScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExampleComboScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExampleComboScannerStaticRow(row *sql.Row) ExampleComboScannerStaticRow {
	return ExampleComboScannerStaticRow{
		row: row,
	}
}

// ExampleComboScannerStaticRow generated by genieql
type ExampleComboScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t ExampleComboScannerStaticRow) Scan(i *int, ts *time.Time, e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Timestamptz
		c2  pgtype.Int8
		c3  pgtype.Bit
		c4  pgtype.Varbit
		c5  pgtype.Bool
		c6  pgtype.Bytea
		c7  pgtype.Varchar
		c8  pgtype.BPChar
		c9  pgtype.CIDR
		c10 pgtype.Numeric
		c11 pgtype.Float8
		c12 pgtype.Inet
		c13 pgtype.Int2Array
		c14 pgtype.Int4Array
		c15 pgtype.Int8Array
		c16 pgtype.Int4
		c17 pgtype.Interval
		c18 pgtype.JSON
		c19 pgtype.JSONB
		c20 pgtype.Macaddr
		c21 pgtype.Numeric
		c22 pgtype.Float4
		c23 pgtype.Int2
		c24 pgtype.Text
		c25 pgtype.Timestamptz
		c26 pgtype.UUIDArray
		c27 pgtype.UUID
		c28 pgtype.Bool
		c29 pgtype.Int4Array
		c30 pgtype.Int8Array
		c31 pgtype.Text
		c32 pgtype.Timestamptz
		c33 pgtype.UUIDArray
		c34 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34); err != nil {
		return err
	}

	if err := c0.AssignTo(i); err != nil {
		return err
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*ts = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*ts = tmp
	default:
		if err := c1.AssignTo(ts); err != nil {
			return err
		}
	}

	if err := c2.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c23.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c24.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c25.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c25.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c26.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c27.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c30.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c31.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c32.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c32.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c33.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c34.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t ExampleComboScannerStaticRow) Err(err error) ExampleComboScannerStaticRow {
	t.err = err
	return t
}

// Example1Insert1StaticColumns generated by genieql
const Example1Insert1StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT`

// Example1Insert1Explode generated by genieql
func Example1Insert1Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray   // uuid_array
	)

	if err := c0.Set(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(a.BitField); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(a.BitVaryingField); err != nil {
		return []interface{}(nil), err
	}

	if err := c3.Set(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Set(a.ByteArrayField); err != nil {
		return []interface{}(nil), err
	}

	if err := c5.Set(a.CharacterField); err != nil {
		return []interface{}(nil), err
	}

	if err := c6.Set(a.CharacterFixedField); err != nil {
		return []interface{}(nil), err
	}

	if err := c7.Set(a.CidrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c8.Set(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c9.Set(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Set(a.InetField); err != nil {
		return []interface{}(nil), err
	}

	if err := c11.Set(a.Int2Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c12.Set(a.Int4Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Set(a.Int8Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Set(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Set(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c16.Set(a.JSONField); err != nil {
		return []interface{}(nil), err
	}

	if err := c17.Set(a.JsonbField); err != nil {
		return []interface{}(nil), err
	}

	if err := c18.Set(a.MacaddrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c19.Set(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c20.Set(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c21.Set(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c22.Set(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c23.Set(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c24.Set(a.UUIDArray); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24}, nil
}

// Example1Insert1 generated by genieql
func Example1Insert1(ctx context.Context, q sqlx.Queryer, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray
	)
	if err := c0.Set(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Set(a.BitField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c2.Set(a.BitVaryingField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c3.Set(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Set(a.ByteArrayField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c5.Set(a.CharacterField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c6.Set(a.CharacterFixedField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c7.Set(a.CidrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c8.Set(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c9.Set(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Set(a.InetField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c11.Set(a.Int2Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c12.Set(a.Int4Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Set(a.Int8Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Set(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Set(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c16.Set(a.JSONField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c17.Set(a.JsonbField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c18.Set(a.MacaddrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c19.Set(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c20.Set(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c21.Set(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c22.Set(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c23.Set(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	if err := c24.Set(a.UUIDArray); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	} // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24))
}

// Example1Insert2StaticColumns generated by genieql
const Example1Insert2StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT`

// Example1Insert2Explode generated by genieql
func Example1Insert2Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray   // uuid_array
	)

	if err := c0.Set(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(a.BitField); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(a.BitVaryingField); err != nil {
		return []interface{}(nil), err
	}

	if err := c3.Set(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Set(a.ByteArrayField); err != nil {
		return []interface{}(nil), err
	}

	if err := c5.Set(a.CharacterField); err != nil {
		return []interface{}(nil), err
	}

	if err := c6.Set(a.CharacterFixedField); err != nil {
		return []interface{}(nil), err
	}

	if err := c7.Set(a.CidrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c8.Set(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c9.Set(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Set(a.InetField); err != nil {
		return []interface{}(nil), err
	}

	if err := c11.Set(a.Int2Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c12.Set(a.Int4Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Set(a.Int8Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Set(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Set(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c16.Set(a.JSONField); err != nil {
		return []interface{}(nil), err
	}

	if err := c17.Set(a.JsonbField); err != nil {
		return []interface{}(nil), err
	}

	if err := c18.Set(a.MacaddrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c19.Set(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c20.Set(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c21.Set(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c22.Set(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c23.Set(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c24.Set(a.UUIDArray); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24}, nil
}

// Example1Insert2 generated by genieql
func Example1Insert2(ctx context.Context, q sqlx.Queryer, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray
	)
	if err := c0.Set(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Set(a.BitField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c2.Set(a.BitVaryingField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c3.Set(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Set(a.ByteArrayField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c5.Set(a.CharacterField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c6.Set(a.CharacterFixedField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c7.Set(a.CidrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c8.Set(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c9.Set(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Set(a.InetField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c11.Set(a.Int2Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c12.Set(a.Int4Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Set(a.Int8Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Set(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Set(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c16.Set(a.JSONField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c17.Set(a.JsonbField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c18.Set(a.MacaddrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c19.Set(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c20.Set(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c21.Set(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c22.Set(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c23.Set(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	if err := c24.Set(a.UUIDArray); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	} // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24))
}

// Example1Insert3StaticColumns generated by genieql
const Example1Insert3StaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT`

// Example1Insert3Explode generated by genieql
func Example1Insert3Explode(a *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray   // uuid_array
	)

	if err := c0.Set(a.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(a.BitField); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(a.BitVaryingField); err != nil {
		return []interface{}(nil), err
	}

	if err := c3.Set(a.BoolField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Set(a.ByteArrayField); err != nil {
		return []interface{}(nil), err
	}

	if err := c5.Set(a.CharacterField); err != nil {
		return []interface{}(nil), err
	}

	if err := c6.Set(a.CharacterFixedField); err != nil {
		return []interface{}(nil), err
	}

	if err := c7.Set(a.CidrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c8.Set(a.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c9.Set(a.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Set(a.InetField); err != nil {
		return []interface{}(nil), err
	}

	if err := c11.Set(a.Int2Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c12.Set(a.Int4Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Set(a.Int8Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Set(a.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Set(a.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c16.Set(a.JSONField); err != nil {
		return []interface{}(nil), err
	}

	if err := c17.Set(a.JsonbField); err != nil {
		return []interface{}(nil), err
	}

	if err := c18.Set(a.MacaddrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c19.Set(a.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c20.Set(a.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c21.Set(a.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c22.Set(a.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c23.Set(a.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c24.Set(a.UUIDArray); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24}, nil
}

// Example1Insert3 generated by genieql
func Example1Insert3(ctx context.Context, q sqlx.Queryer, id int, a Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,DEFAULT) ON CONFLICT id = $1 AND b = $2 WHERE id = $1 RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array"`
	var (
		c0  pgtype.Int8        // id
		c1  pgtype.Int8        // bigint_field
		c2  pgtype.Bit         // bit_field
		c3  pgtype.Varbit      // bit_varying_field
		c4  pgtype.Bool        // bool_field
		c5  pgtype.Bytea       // byte_array_field
		c6  pgtype.Varchar     // character_field
		c7  pgtype.BPChar      // character_fixed_field
		c8  pgtype.CIDR        // cidr_field
		c9  pgtype.Numeric     // decimal_field
		c10 pgtype.Float8      // double_precision_field
		c11 pgtype.Inet        // inet_field
		c12 pgtype.Int2Array   // int2_array
		c13 pgtype.Int4Array   // int4_array
		c14 pgtype.Int8Array   // int8_array
		c15 pgtype.Int4        // int_field
		c16 pgtype.Interval    // interval_field
		c17 pgtype.JSON        // json_field
		c18 pgtype.JSONB       // jsonb_field
		c19 pgtype.Macaddr     // macaddr_field
		c20 pgtype.Numeric     // numeric_field
		c21 pgtype.Float4      // real_field
		c22 pgtype.Int2        // smallint_field
		c23 pgtype.Text        // text_field
		c24 pgtype.Timestamptz // timestamp_field
		c25 pgtype.UUIDArray
	)
	if err := c0.Set(id); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Set(a.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c2.Set(a.BitField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c3.Set(a.BitVaryingField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Set(a.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c5.Set(a.ByteArrayField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c6.Set(a.CharacterField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c7.Set(a.CharacterFixedField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c8.Set(a.CidrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c9.Set(a.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Set(a.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c11.Set(a.InetField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c12.Set(a.Int2Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Set(a.Int4Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Set(a.Int8Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Set(a.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c16.Set(a.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c17.Set(a.JSONField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c18.Set(a.JsonbField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c19.Set(a.MacaddrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c20.Set(a.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c21.Set(a.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c22.Set(a.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c23.Set(a.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch a.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c24.Set(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c24.Set(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c24.Set(a.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	if err := c25.Set(a.UUIDArray); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	} // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25))
}

// Example1InsertBatch1 generated by genieql
func NewExample1InsertBatch1(ctx context.Context, q sqlx.Queryer, a ...Example1) Example1Scanner {
	return &example1InsertBatch1{ctx: ctx, q: q, remaining: a}
}

type example1InsertBatch1 struct {
	ctx       context.Context
	q         sqlx.Queryer
	remaining []Example1
	scanner   Example1Scanner
}

func (t *example1InsertBatch1) Scan(a *Example1) error {
	return t.scanner.Scan(a)
}

func (t *example1InsertBatch1) Err() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Err()
}

func (t *example1InsertBatch1) Close() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Close()
}

func (t *example1InsertBatch1) Next() bool {
	var advanced bool
	if t.scanner != nil && t.scanner.Next() {
		return true
	}
	if len(t.remaining) > 0 && t.Close() == nil {
		t.scanner, t.remaining, advanced = t.advance(t.remaining...)
		return advanced && t.scanner.Next()
	}
	return false
}

func (t *example1InsertBatch1) advance(a ...Example1) (Example1Scanner, []Example1, bool) {
	transform := func(a Example1) (c0 pgtype.Int8, c1 pgtype.Bit, c2 pgtype.Varbit, c3 pgtype.Bool, c4 pgtype.Bytea, c5 pgtype.Varchar, c6 pgtype.BPChar, c7 pgtype.CIDR, c8 pgtype.Numeric, c9 pgtype.Float8, c10 pgtype.Inet, c11 pgtype.Int2Array, c12 pgtype.Int4Array, c13 pgtype.Int8Array, c14 pgtype.Int4, c15 pgtype.Interval, c16 pgtype.JSON, c17 pgtype.JSONB, c18 pgtype.Macaddr, c19 pgtype.Numeric, c20 pgtype.Float4, c21 pgtype.Int2, c22 pgtype.Text, c23 pgtype.Timestamptz, c24 pgtype.UUIDArray, c25 pgtype.UUID, err error) {
		if err := c0.Set(a.BigintField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c1.Set(a.BitField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c2.Set(a.BitVaryingField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c3.Set(a.BoolField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c4.Set(a.ByteArrayField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c5.Set(a.CharacterField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c6.Set(a.CharacterFixedField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c7.Set(a.CidrField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c8.Set(a.DecimalField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c9.Set(a.DoublePrecisionField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c10.Set(a.InetField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c11.Set(a.Int2Array); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c12.Set(a.Int4Array); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c13.Set(a.Int8Array); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c14.Set(a.IntField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c15.Set(a.IntervalField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c16.Set(a.JSONField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c17.Set(a.JsonbField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c18.Set(a.MacaddrField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c19.Set(a.NumericField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c20.Set(a.RealField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c21.Set(a.SmallintField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c22.Set(a.TextField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		switch a.TimestampField {
		case time.Unix(math.MaxInt64-62135596800, 999999999):
			if err := c23.Set(pgtype.Infinity); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
			}
		case time.Unix(math.MinInt64, math.MinInt64):
			if err := c23.Set(pgtype.NegativeInfinity); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
			}
		default:
			if err := c23.Set(a.TimestampField); err != nil {
				return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
			}
		}
		if err := c24.Set(a.UUIDArray); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		if err := c25.Set(a.UUIDField); err != nil {
			return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, err
		}
		return c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, nil
	}
	switch len(a) {
	case 0:
		return nil, []Example1(nil), false
	case 1:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		var (
			r0c0  pgtype.Int8
			r0c1  pgtype.Bit
			r0c2  pgtype.Varbit
			r0c3  pgtype.Bool
			r0c4  pgtype.Bytea
			r0c5  pgtype.Varchar
			r0c6  pgtype.BPChar
			r0c7  pgtype.CIDR
			r0c8  pgtype.Numeric
			r0c9  pgtype.Float8
			r0c10 pgtype.Inet
			r0c11 pgtype.Int2Array
			r0c12 pgtype.Int4Array
			r0c13 pgtype.Int8Array
			r0c14 pgtype.Int4
			r0c15 pgtype.Interval
			r0c16 pgtype.JSON
			r0c17 pgtype.JSONB
			r0c18 pgtype.Macaddr
			r0c19 pgtype.Numeric
			r0c20 pgtype.Float4
			r0c21 pgtype.Int2
			r0c22 pgtype.Text
			r0c23 pgtype.Timestamptz
			r0c24 pgtype.UUIDArray
			r0c25 pgtype.UUID
			err   error
		)
		if r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, r0c19, r0c20, r0c21, r0c22, r0c23, r0c24, r0c25, err = transform(a[0]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		return NewExample1ScannerStatic(t.q.QueryContext(t.ctx, query, r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, r0c19, r0c20, r0c21, r0c22, r0c23, r0c24, r0c25)), a[1:], true
	default:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26),($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		var (
			r0c0  pgtype.Int8
			r0c1  pgtype.Bit
			r0c2  pgtype.Varbit
			r0c3  pgtype.Bool
			r0c4  pgtype.Bytea
			r0c5  pgtype.Varchar
			r0c6  pgtype.BPChar
			r0c7  pgtype.CIDR
			r0c8  pgtype.Numeric
			r0c9  pgtype.Float8
			r0c10 pgtype.Inet
			r0c11 pgtype.Int2Array
			r0c12 pgtype.Int4Array
			r0c13 pgtype.Int8Array
			r0c14 pgtype.Int4
			r0c15 pgtype.Interval
			r0c16 pgtype.JSON
			r0c17 pgtype.JSONB
			r0c18 pgtype.Macaddr
			r0c19 pgtype.Numeric
			r0c20 pgtype.Float4
			r0c21 pgtype.Int2
			r0c22 pgtype.Text
			r0c23 pgtype.Timestamptz
			r0c24 pgtype.UUIDArray
			r0c25 pgtype.UUID
			r1c0  pgtype.Int8
			r1c1  pgtype.Bit
			r1c2  pgtype.Varbit
			r1c3  pgtype.Bool
			r1c4  pgtype.Bytea
			r1c5  pgtype.Varchar
			r1c6  pgtype.BPChar
			r1c7  pgtype.CIDR
			r1c8  pgtype.Numeric
			r1c9  pgtype.Float8
			r1c10 pgtype.Inet
			r1c11 pgtype.Int2Array
			r1c12 pgtype.Int4Array
			r1c13 pgtype.Int8Array
			r1c14 pgtype.Int4
			r1c15 pgtype.Interval
			r1c16 pgtype.JSON
			r1c17 pgtype.JSONB
			r1c18 pgtype.Macaddr
			r1c19 pgtype.Numeric
			r1c20 pgtype.Float4
			r1c21 pgtype.Int2
			r1c22 pgtype.Text
			r1c23 pgtype.Timestamptz
			r1c24 pgtype.UUIDArray
			r1c25 pgtype.UUID
			err   error
		)
		if r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, r0c19, r0c20, r0c21, r0c22, r0c23, r0c24, r0c25, err = transform(a[0]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		if r1c0, r1c1, r1c2, r1c3, r1c4, r1c5, r1c6, r1c7, r1c8, r1c9, r1c10, r1c11, r1c12, r1c13, r1c14, r1c15, r1c16, r1c17, r1c18, r1c19, r1c20, r1c21, r1c22, r1c23, r1c24, r1c25, err = transform(a[1]); err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}
		return NewExample1ScannerStatic(t.q.QueryContext(t.ctx, query, r0c0, r0c1, r0c2, r0c3, r0c4, r0c5, r0c6, r0c7, r0c8, r0c9, r0c10, r0c11, r0c12, r0c13, r0c14, r0c15, r0c16, r0c17, r0c18, r0c19, r0c20, r0c21, r0c22, r0c23, r0c24, r0c25, r1c0, r1c1, r1c2, r1c3, r1c4, r1c5, r1c6, r1c7, r1c8, r1c9, r1c10, r1c11, r1c12, r1c13, r1c14, r1c15, r1c16, r1c17, r1c18, r1c19, r1c20, r1c21, r1c22, r1c23, r1c24, r1c25)), []Example1(nil), false
	}
}

// Example1Update1 generated by genieql
func Example1Update1(ctx context.Context, q sqlx.Queryer, i int, camelCaseID int, snakeCase int, e1 Example1, e2 Example2) Example1ScannerStaticRow {
	const query = `UPDATE example1 SET WHERE bigint_field = $1 RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var c0 pgtype.Int8 // bigint_field
	if err := c0.Set(e1.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0))
}

// Example1Update2 generated by genieql
func Example1Update2(ctx context.Context, q sqlx.Queryer, i int, camelCaseID int, snakeCase int, e1 Example1, e2 Example2) Example1Scanner {
	const query = `UPDATE example1 SET WHERE bigint_field = $1 RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var c0 pgtype.Int8 // bigint_field
	if err := c0.Set(e1.BigintField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c0))
}

// Example1FindByBigintField generated by genieql
// test simple function generation with field replacement
func Example1FindByBigintField(ctx context.Context, q sqlx.Queryer, p Example1) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "id" = $2 AND "id" = $1`
	var (
		c0 pgtype.Int8 // bigint_field
		c1 pgtype.Int4 // int_field
	)
	if err := c0.Set(p.BigintField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	if err := c1.Set(p.IntField); err != nil {
		return NewExample1ScannerStatic(nil, err)
	}
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c0, c1))
}
