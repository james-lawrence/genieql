//go:build !genieql.ignore
// +build !genieql.ignore

package duckdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/james-lawrence/duckdbtypes"
	"github.com/james-lawrence/genieql/internal/sqlx"
)

// DO NOT EDIT: This File was auto generated by the following command:
// genieql auto --config duckdb.example.config -o genieql.gen.go
// invoked by go generate @ duckdb/duckdb.go line 6

// Example1 generated by genieql
// Example1 ...
type Example1 struct {
	BigintField    int64
	BoolField      bool
	DecimalField   float64
	IntField       int32
	NumericField   float64
	RealField      float64
	SmallintField  int16
	TextField      string
	TimestampField time.Time
	UUIDField      string
}

// Example1Scanner scanner interface.
type Example1Scanner interface {
	Scan(sp0 *Example1) error
	Next() bool
	Close() error
	Err() error
}

type errExample1Scanner struct {
	e error
}

func (t errExample1Scanner) Scan(sp0 *Example1) error {
	return t.e
}

func (t errExample1Scanner) Next() bool {
	return false
}

func (t errExample1Scanner) Err() error {
	return t.e
}

func (t errExample1Scanner) Close() error {
	return nil
}

// Example1ScannerStaticColumns generated by genieql
const Example1ScannerStaticColumns = `"bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field"`

// NewExample1ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample1ScannerStatic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerStatic{
		Rows: rows,
	}
}

// example1ScannerStatic generated by genieql
type example1ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerStatic) Scan(sp0 *Example1) error {
	var (
		c0 sql.NullInt64
		c1 sql.NullBool
		c2 sql.NullFloat64
		c3 sql.NullInt32
		c4 sql.NullFloat64
		c5 sql.NullFloat64
		c6 sql.NullInt16
		c7 sql.NullString
		c8 sql.NullTime
		c9 duckdbtypes.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9); err != nil {
		return err
	}

	if c0.Valid {
		tmp := int64(c0.Int64)
		sp0.BigintField = tmp
	}

	if c1.Valid {
		tmp := c1.Bool
		sp0.BoolField = tmp
	}

	if c2.Valid {
		tmp := float64(c2.Float64)
		sp0.DecimalField = tmp
	}

	if c3.Valid {
		tmp := int32(c3.Int32)
		sp0.IntField = tmp
	}

	if c4.Valid {
		tmp := float64(c4.Float64)
		sp0.NumericField = tmp
	}

	if c5.Valid {
		tmp := float64(c5.Float64)
		sp0.RealField = tmp
	}

	if c6.Valid {
		tmp := int16(c6.Int16)
		sp0.SmallintField = tmp
	}

	if c7.Valid {
		tmp := string(c7.String)
		sp0.TextField = tmp
	}

	if c8.Valid {
		tmp := c8.Time
		sp0.TimestampField = tmp
	}

	if err := c9.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample1ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample1ScannerStaticRow(row *sql.Row) Example1ScannerStaticRow {
	return Example1ScannerStaticRow{
		row: row,
	}
}

// Example1ScannerStaticRow generated by genieql
type Example1ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example1ScannerStaticRow) Scan(sp0 *Example1) error {
	var (
		c0 sql.NullInt64
		c1 sql.NullBool
		c2 sql.NullFloat64
		c3 sql.NullInt32
		c4 sql.NullFloat64
		c5 sql.NullFloat64
		c6 sql.NullInt16
		c7 sql.NullString
		c8 sql.NullTime
		c9 duckdbtypes.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9); err != nil {
		return err
	}

	if c0.Valid {
		tmp := int64(c0.Int64)
		sp0.BigintField = tmp
	}

	if c1.Valid {
		tmp := c1.Bool
		sp0.BoolField = tmp
	}

	if c2.Valid {
		tmp := float64(c2.Float64)
		sp0.DecimalField = tmp
	}

	if c3.Valid {
		tmp := int32(c3.Int32)
		sp0.IntField = tmp
	}

	if c4.Valid {
		tmp := float64(c4.Float64)
		sp0.NumericField = tmp
	}

	if c5.Valid {
		tmp := float64(c5.Float64)
		sp0.RealField = tmp
	}

	if c6.Valid {
		tmp := int16(c6.Int16)
		sp0.SmallintField = tmp
	}

	if c7.Valid {
		tmp := string(c7.String)
		sp0.TextField = tmp
	}

	if c8.Valid {
		tmp := c8.Time
		sp0.TimestampField = tmp
	}

	if err := c9.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t Example1ScannerStaticRow) Err(err error) Example1ScannerStaticRow {
	t.err = err
	return t
}

// NewExample1ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample1ScannerDynamic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerDynamic{
		Rows: rows,
	}
}

// example1ScannerDynamic generated by genieql
type example1ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerDynamic) Scan(sp0 *Example1) error {
	const (
		cn0 = "bigint_field"
		cn1 = "bool_field"
		cn2 = "decimal_field"
		cn3 = "int_field"
		cn4 = "numeric_field"
		cn5 = "real_field"
		cn6 = "smallint_field"
		cn7 = "text_field"
		cn8 = "timestamp_field"
		cn9 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      sql.NullInt64
		c1      sql.NullBool
		c2      sql.NullFloat64
		c3      sql.NullInt32
		c4      sql.NullFloat64
		c5      sql.NullFloat64
		c6      sql.NullInt16
		c7      sql.NullString
		c8      sql.NullTime
		c9      duckdbtypes.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		case cn7:
			dst = append(dst, &c7)
		case cn8:
			dst = append(dst, &c8)
		case cn9:
			dst = append(dst, &c9)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if c0.Valid {
				tmp := int64(c0.Int64)
				sp0.BigintField = tmp
			}

		case cn1:
			if c1.Valid {
				tmp := c1.Bool
				sp0.BoolField = tmp
			}

		case cn2:
			if c2.Valid {
				tmp := float64(c2.Float64)
				sp0.DecimalField = tmp
			}

		case cn3:
			if c3.Valid {
				tmp := int32(c3.Int32)
				sp0.IntField = tmp
			}

		case cn4:
			if c4.Valid {
				tmp := float64(c4.Float64)
				sp0.NumericField = tmp
			}

		case cn5:
			if c5.Valid {
				tmp := float64(c5.Float64)
				sp0.RealField = tmp
			}

		case cn6:
			if c6.Valid {
				tmp := int16(c6.Int16)
				sp0.SmallintField = tmp
			}

		case cn7:
			if c7.Valid {
				tmp := string(c7.String)
				sp0.TextField = tmp
			}

		case cn8:
			if c8.Valid {
				tmp := c8.Time
				sp0.TimestampField = tmp
			}

		case cn9:
			if err := c9.AssignTo(&sp0.UUIDField); err != nil {
				return err
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example1FindByBigintField generated by genieql
func Example1FindByBigintField(ctx context.Context, q sqlx.Queryer, c sql.NullInt64) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "bigint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByBoolField generated by genieql
func Example1FindByBoolField(ctx context.Context, q sqlx.Queryer, c sql.NullBool) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "bool_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByDecimalField generated by genieql
func Example1FindByDecimalField(ctx context.Context, q sqlx.Queryer, c sql.NullFloat64) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "decimal_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByIntField generated by genieql
func Example1FindByIntField(ctx context.Context, q sqlx.Queryer, c sql.NullInt32) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "int_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByNumericField generated by genieql
func Example1FindByNumericField(ctx context.Context, q sqlx.Queryer, c sql.NullFloat64) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "numeric_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByRealField generated by genieql
func Example1FindByRealField(ctx context.Context, q sqlx.Queryer, c sql.NullFloat64) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "real_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindBySmallintField generated by genieql
func Example1FindBySmallintField(ctx context.Context, q sqlx.Queryer, c sql.NullInt16) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "smallint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTextField generated by genieql
func Example1FindByTextField(ctx context.Context, q sqlx.Queryer, c sql.NullString) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "text_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTimestampField generated by genieql
func Example1FindByTimestampField(ctx context.Context, q sqlx.Queryer, c sql.NullTime) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "timestamp_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByUUIDField generated by genieql
func Example1FindByUUIDField(ctx context.Context, q sqlx.Queryer, c duckdbtypes.UUID) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field" FROM "example1" WHERE "uuid_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1InsertStaticColumns generated by genieql
const Example1InsertStaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10`

// Example1InsertExplode generated by genieql
func Example1InsertExplode(e *Example1) ([]interface{}, error) {
	var (
		c0 sql.NullInt64    // bigint_field
		c1 sql.NullBool     // bool_field
		c2 sql.NullFloat64  // decimal_field
		c3 sql.NullInt32    // int_field
		c4 sql.NullFloat64  // numeric_field
		c5 sql.NullFloat64  // real_field
		c6 sql.NullInt16    // smallint_field
		c7 sql.NullString   // text_field
		c8 sql.NullTime     // timestamp_field
		c9 duckdbtypes.UUID // uuid_field
	)

	c0.Valid = true
	c0.Int64 = int64(e.BigintField)

	c1.Valid = true
	c1.Bool = e.BoolField

	c2.Valid = true
	c2.Float64 = e.DecimalField

	c3.Valid = true
	c3.Int32 = int32(e.IntField)

	c4.Valid = true
	c4.Float64 = e.NumericField

	c5.Valid = true
	c5.Float64 = e.RealField

	c6.Valid = true
	c6.Int16 = int16(e.SmallintField)

	c7.Valid = true
	c7.String = e.TextField

	c8.Valid = true
	c8.Time = e.TimestampField

	if err := c9.Scan(e.UUIDField); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9}, nil
}

// Example1Insert generated by genieql
// insert a single example1 record.
func Example1Insert(ctx context.Context, q sqlx.Queryer, e Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO "example1" ("bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) RETURNING "bigint_field","bool_field","decimal_field","int_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_field"`
	var (
		c0 sql.NullInt64   // bigint_field
		c1 sql.NullBool    // bool_field
		c2 sql.NullFloat64 // decimal_field
		c3 sql.NullInt32   // int_field
		c4 sql.NullFloat64 // numeric_field
		c5 sql.NullFloat64 // real_field
		c6 sql.NullInt16   // smallint_field
		c7 sql.NullString  // text_field
		c8 sql.NullTime    // timestamp_field
		c9 duckdbtypes.UUID
	)
	c0.Valid = true
	c0.Int64 = int64(e.BigintField)
	c1.Valid = true
	c1.Bool = e.BoolField
	c2.Valid = true
	c2.Float64 = e.DecimalField
	c3.Valid = true
	c3.Int32 = int32(e.IntField)
	c4.Valid = true
	c4.Float64 = e.NumericField
	c5.Valid = true
	c5.Float64 = e.RealField
	c6.Valid = true
	c6.Int16 = int16(e.SmallintField)
	c7.Valid = true
	c7.String = e.TextField
	c8.Valid = true
	c8.Time = e.TimestampField
	if err := c9.Scan(e.UUIDField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	} // uuid_field
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
}
