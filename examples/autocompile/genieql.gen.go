//go:build !genieql.ignore
// +build !genieql.ignore

package autocompile

import (
	"context"
	"database/sql"
	"math"
	"net"
	"time"

	"github.com/jackc/pgtype"
	"github.com/james-lawrence/genieql/examples/autocompile/pkga"
	"github.com/james-lawrence/genieql/internal/sqlx"
)

// DO NOT EDIT: This File was auto generated by the following command:
// genieql auto -o genieql.gen.go
// invoked by go generate @ autocompile/genieql.cmd.go line 3

// Example1 generated by genieql
// Example1 ...
type Example1 struct {
	BigintField          int
	BitField             []byte
	BitVaryingField      []byte
	BoolField            bool
	ByteArrayField       []byte
	CharacterField       string
	CharacterFixedField  string
	CidrField            net.IPNet
	DecimalField         float64
	DoublePrecisionField float64
	InetField            net.IP
	Int2Array            []int
	Int4Array            []int
	Int8Array            []int
	IntField             int
	IntervalField        time.Duration
	JSONField            []byte
	JsonbField           []byte
	MacaddrField         net.HardwareAddr
	NumericField         float64
	RealField            float32
	SmallintField        int
	TextField            string
	TimestampField       time.Time
	UUIDArray            []string
	UUIDField            string
}

// Example2 generated by genieql
// Example2 ...
type Example2 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example3 generated by genieql
// Example3 ...
type Example3 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example4 generated by genieql
// Example4 ...
type Example4 struct {
	BoolField bool
	TextField string
	UUIDField string
}

// Example5 generated by genieql
// Example5 ...
type Example5 struct {
	Field1 int
	Field2 int
}

// Timestamp generated by genieql
type Timestamp struct {
	Timestamp           time.Time
	Timestamptz         time.Time
	TimestamptzNullable *time.Time
	UUID                string
}

// CustomScanner scanner interface.
type CustomScanner interface {
	Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error
	Next() bool
	Close() error
	Err() error
}

type errCustomScanner struct {
	e error
}

func (t errCustomScanner) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	return t.e
}

func (t errCustomScanner) Next() bool {
	return false
}

func (t errCustomScanner) Err() error {
	return t.e
}

func (t errCustomScanner) Close() error {
	return nil
}

// CustomScannerStaticColumns generated by genieql
const CustomScannerStaticColumns = `"i1","i2","b1","t1"`

// NewCustomScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCustomScannerStatic(rows *sql.Rows, err error) CustomScanner {
	if err != nil {
		return errCustomScanner{e: err}
	}

	return customScannerStatic{
		Rows: rows,
	}
}

// customScannerStatic generated by genieql
type customScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t customScannerStatic) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	var (
		c0 pgtype.Int8
		c1 pgtype.Int8
		c2 pgtype.Bool
		c3 pgtype.Timestamptz
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if err := c0.AssignTo(i1); err != nil {
		return err
	}

	if err := c1.AssignTo(i2); err != nil {
		return err
	}

	if err := c2.AssignTo(b1); err != nil {
		return err
	}

	switch c3.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*t1 = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*t1 = tmp
	default:
		if err := c3.AssignTo(t1); err != nil {
			return err
		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t customScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t customScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t customScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewCustomScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCustomScannerStaticRow(row *sql.Row) CustomScannerStaticRow {
	return CustomScannerStaticRow{
		row: row,
	}
}

// CustomScannerStaticRow generated by genieql
type CustomScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CustomScannerStaticRow) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	var (
		c0 pgtype.Int8
		c1 pgtype.Int8
		c2 pgtype.Bool
		c3 pgtype.Timestamptz
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if err := c0.AssignTo(i1); err != nil {
		return err
	}

	if err := c1.AssignTo(i2); err != nil {
		return err
	}

	if err := c2.AssignTo(b1); err != nil {
		return err
	}

	switch c3.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*t1 = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*t1 = tmp
	default:
		if err := c3.AssignTo(t1); err != nil {
			return err
		}
	}

	return nil
}

// Err set an error to return by scan
func (t CustomScannerStaticRow) Err(err error) CustomScannerStaticRow {
	t.err = err
	return t
}

// NewCustomScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewCustomScannerDynamic(rows *sql.Rows, err error) CustomScanner {
	if err != nil {
		return errCustomScanner{e: err}
	}

	return customScannerDynamic{
		Rows: rows,
	}
}

// customScannerDynamic generated by genieql
type customScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t customScannerDynamic) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	const (
		cn0 = "i1"
		cn1 = "i2"
		cn2 = "b1"
		cn3 = "t1"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Int8
		c2      pgtype.Bool
		c3      pgtype.Timestamptz
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if err := c0.AssignTo(i1); err != nil {
				return err
			}

		case cn1:
			if err := c1.AssignTo(i2); err != nil {
				return err
			}

		case cn2:
			if err := c2.AssignTo(b1); err != nil {
				return err
			}

		case cn3:
			switch c3.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				*t1 = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				*t1 = tmp
			default:
				if err := c3.AssignTo(t1); err != nil {
					return err
				}
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t customScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t customScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t customScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example1Scanner scanner interface.
type Example1Scanner interface {
	Scan(sp0 *Example1) error
	Next() bool
	Close() error
	Err() error
}

type errExample1Scanner struct {
	e error
}

func (t errExample1Scanner) Scan(sp0 *Example1) error {
	return t.e
}

func (t errExample1Scanner) Next() bool {
	return false
}

func (t errExample1Scanner) Err() error {
	return t.e
}

func (t errExample1Scanner) Close() error {
	return nil
}

// Example1ScannerStaticColumns generated by genieql
const Example1ScannerStaticColumns = `"bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample1ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample1ScannerStatic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerStatic{
		Rows: rows,
	}
}

// example1ScannerStatic generated by genieql
type example1ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerStatic) Scan(sp0 *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if err := c0.AssignTo(&sp0.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&sp0.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&sp0.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&sp0.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&sp0.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&sp0.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&sp0.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&sp0.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&sp0.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&sp0.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&sp0.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&sp0.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&sp0.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&sp0.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&sp0.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&sp0.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&sp0.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&sp0.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&sp0.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&sp0.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&sp0.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&sp0.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&sp0.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if err := c23.AssignTo(&sp0.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&sp0.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample1ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample1ScannerStaticRow(row *sql.Row) Example1ScannerStaticRow {
	return Example1ScannerStaticRow{
		row: row,
	}
}

// Example1ScannerStaticRow generated by genieql
type Example1ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example1ScannerStaticRow) Scan(sp0 *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if err := c0.AssignTo(&sp0.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&sp0.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&sp0.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&sp0.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&sp0.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&sp0.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&sp0.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&sp0.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&sp0.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&sp0.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&sp0.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&sp0.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&sp0.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&sp0.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&sp0.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&sp0.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&sp0.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&sp0.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&sp0.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&sp0.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&sp0.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&sp0.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&sp0.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if err := c23.AssignTo(&sp0.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&sp0.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t Example1ScannerStaticRow) Err(err error) Example1ScannerStaticRow {
	t.err = err
	return t
}

// NewExample1ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample1ScannerDynamic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerDynamic{
		Rows: rows,
	}
}

// example1ScannerDynamic generated by genieql
type example1ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerDynamic) Scan(sp0 *Example1) error {
	const (
		cn0  = "bigint_field"
		cn1  = "bit_field"
		cn2  = "bit_varying_field"
		cn3  = "bool_field"
		cn4  = "byte_array_field"
		cn5  = "character_field"
		cn6  = "character_fixed_field"
		cn7  = "cidr_field"
		cn8  = "decimal_field"
		cn9  = "double_precision_field"
		cn10 = "inet_field"
		cn11 = "int2_array"
		cn12 = "int4_array"
		cn13 = "int8_array"
		cn14 = "int_field"
		cn15 = "interval_field"
		cn16 = "json_field"
		cn17 = "jsonb_field"
		cn18 = "macaddr_field"
		cn19 = "numeric_field"
		cn20 = "real_field"
		cn21 = "smallint_field"
		cn22 = "text_field"
		cn23 = "timestamp_field"
		cn24 = "uuid_array"
		cn25 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Bit
		c2      pgtype.Varbit
		c3      pgtype.Bool
		c4      pgtype.Bytea
		c5      pgtype.Varchar
		c6      pgtype.BPChar
		c7      pgtype.CIDR
		c8      pgtype.Numeric
		c9      pgtype.Float8
		c10     pgtype.Inet
		c11     pgtype.Int2Array
		c12     pgtype.Int4Array
		c13     pgtype.Int8Array
		c14     pgtype.Int4
		c15     pgtype.Interval
		c16     pgtype.JSON
		c17     pgtype.JSONB
		c18     pgtype.Macaddr
		c19     pgtype.Numeric
		c20     pgtype.Float4
		c21     pgtype.Int2
		c22     pgtype.Text
		c23     pgtype.Timestamptz
		c24     pgtype.UUIDArray
		c25     pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		case cn7:
			dst = append(dst, &c7)
		case cn8:
			dst = append(dst, &c8)
		case cn9:
			dst = append(dst, &c9)
		case cn10:
			dst = append(dst, &c10)
		case cn11:
			dst = append(dst, &c11)
		case cn12:
			dst = append(dst, &c12)
		case cn13:
			dst = append(dst, &c13)
		case cn14:
			dst = append(dst, &c14)
		case cn15:
			dst = append(dst, &c15)
		case cn16:
			dst = append(dst, &c16)
		case cn17:
			dst = append(dst, &c17)
		case cn18:
			dst = append(dst, &c18)
		case cn19:
			dst = append(dst, &c19)
		case cn20:
			dst = append(dst, &c20)
		case cn21:
			dst = append(dst, &c21)
		case cn22:
			dst = append(dst, &c22)
		case cn23:
			dst = append(dst, &c23)
		case cn24:
			dst = append(dst, &c24)
		case cn25:
			dst = append(dst, &c25)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if err := c0.AssignTo(&sp0.BigintField); err != nil {
				return err
			}

		case cn1:
			if err := c1.AssignTo(&sp0.BitField); err != nil {
				return err
			}

		case cn2:
			if err := c2.AssignTo(&sp0.BitVaryingField); err != nil {
				return err
			}

		case cn3:
			if err := c3.AssignTo(&sp0.BoolField); err != nil {
				return err
			}

		case cn4:
			if err := c4.AssignTo(&sp0.ByteArrayField); err != nil {
				return err
			}

		case cn5:
			if err := c5.AssignTo(&sp0.CharacterField); err != nil {
				return err
			}

		case cn6:
			if err := c6.AssignTo(&sp0.CharacterFixedField); err != nil {
				return err
			}

		case cn7:
			if err := c7.AssignTo(&sp0.CidrField); err != nil {
				return err
			}

		case cn8:
			if err := c8.AssignTo(&sp0.DecimalField); err != nil {
				return err
			}

		case cn9:
			if err := c9.AssignTo(&sp0.DoublePrecisionField); err != nil {
				return err
			}

		case cn10:
			if err := c10.AssignTo(&sp0.InetField); err != nil {
				return err
			}

		case cn11:
			if err := c11.AssignTo(&sp0.Int2Array); err != nil {
				return err
			}

		case cn12:
			if err := c12.AssignTo(&sp0.Int4Array); err != nil {
				return err
			}

		case cn13:
			if err := c13.AssignTo(&sp0.Int8Array); err != nil {
				return err
			}

		case cn14:
			if err := c14.AssignTo(&sp0.IntField); err != nil {
				return err
			}

		case cn15:
			if err := c15.AssignTo(&sp0.IntervalField); err != nil {
				return err
			}

		case cn16:
			if err := c16.AssignTo(&sp0.JSONField); err != nil {
				return err
			}

		case cn17:
			if err := c17.AssignTo(&sp0.JsonbField); err != nil {
				return err
			}

		case cn18:
			if err := c18.AssignTo(&sp0.MacaddrField); err != nil {
				return err
			}

		case cn19:
			if err := c19.AssignTo(&sp0.NumericField); err != nil {
				return err
			}

		case cn20:
			if err := c20.AssignTo(&sp0.RealField); err != nil {
				return err
			}

		case cn21:
			if err := c21.AssignTo(&sp0.SmallintField); err != nil {
				return err
			}

		case cn22:
			if err := c22.AssignTo(&sp0.TextField); err != nil {
				return err
			}

		case cn23:
			switch c23.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestampField = tmp
			default:
				if err := c23.AssignTo(&sp0.TimestampField); err != nil {
					return err
				}
			}

		case cn24:
			if err := c24.AssignTo(&sp0.UUIDArray); err != nil {
				return err
			}

		case cn25:
			if err := c25.AssignTo(&sp0.UUIDField); err != nil {
				return err
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example2Scanner scanner interface.
type Example2Scanner interface {
	Scan(sp0 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errExample2Scanner struct {
	e error
}

func (t errExample2Scanner) Scan(sp0 *Example2) error {
	return t.e
}

func (t errExample2Scanner) Next() bool {
	return false
}

func (t errExample2Scanner) Err() error {
	return t.e
}

func (t errExample2Scanner) Close() error {
	return nil
}

// Example2ScannerStaticColumns generated by genieql
const Example2ScannerStaticColumns = `"bool_field","int4_array","int8_array","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample2ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample2ScannerStatic(rows *sql.Rows, err error) Example2Scanner {
	if err != nil {
		return errExample2Scanner{e: err}
	}

	return example2ScannerStatic{
		Rows: rows,
	}
}

// example2ScannerStatic generated by genieql
type example2ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example2ScannerStatic) Scan(sp0 *Example2) error {
	var (
		c0 pgtype.Bool
		c1 pgtype.Int4Array
		c2 pgtype.Int8Array
		c3 pgtype.Text
		c4 pgtype.Timestamptz
		c5 pgtype.UUIDArray
		c6 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6); err != nil {
		return err
	}

	if err := c0.AssignTo(&sp0.BoolField); err != nil {
		return err
	}

	if err := c1.AssignTo(&sp0.Int4Array); err != nil {
		return err
	}

	if err := c2.AssignTo(&sp0.Int8Array); err != nil {
		return err
	}

	if err := c3.AssignTo(&sp0.TextField); err != nil {
		return err
	}

	switch c4.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if err := c4.AssignTo(&sp0.TimestampField); err != nil {
			return err
		}
	}

	if err := c5.AssignTo(&sp0.UUIDArray); err != nil {
		return err
	}

	if err := c6.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example2ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example2ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example2ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample2ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample2ScannerStaticRow(row *sql.Row) Example2ScannerStaticRow {
	return Example2ScannerStaticRow{
		row: row,
	}
}

// Example2ScannerStaticRow generated by genieql
type Example2ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example2ScannerStaticRow) Scan(sp0 *Example2) error {
	var (
		c0 pgtype.Bool
		c1 pgtype.Int4Array
		c2 pgtype.Int8Array
		c3 pgtype.Text
		c4 pgtype.Timestamptz
		c5 pgtype.UUIDArray
		c6 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6); err != nil {
		return err
	}

	if err := c0.AssignTo(&sp0.BoolField); err != nil {
		return err
	}

	if err := c1.AssignTo(&sp0.Int4Array); err != nil {
		return err
	}

	if err := c2.AssignTo(&sp0.Int8Array); err != nil {
		return err
	}

	if err := c3.AssignTo(&sp0.TextField); err != nil {
		return err
	}

	switch c4.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if err := c4.AssignTo(&sp0.TimestampField); err != nil {
			return err
		}
	}

	if err := c5.AssignTo(&sp0.UUIDArray); err != nil {
		return err
	}

	if err := c6.AssignTo(&sp0.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t Example2ScannerStaticRow) Err(err error) Example2ScannerStaticRow {
	t.err = err
	return t
}

// NewExample2ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample2ScannerDynamic(rows *sql.Rows, err error) Example2Scanner {
	if err != nil {
		return errExample2Scanner{e: err}
	}

	return example2ScannerDynamic{
		Rows: rows,
	}
}

// example2ScannerDynamic generated by genieql
type example2ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example2ScannerDynamic) Scan(sp0 *Example2) error {
	const (
		cn0 = "bool_field"
		cn1 = "int4_array"
		cn2 = "int8_array"
		cn3 = "text_field"
		cn4 = "timestamp_field"
		cn5 = "uuid_array"
		cn6 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Bool
		c1      pgtype.Int4Array
		c2      pgtype.Int8Array
		c3      pgtype.Text
		c4      pgtype.Timestamptz
		c5      pgtype.UUIDArray
		c6      pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if err := c0.AssignTo(&sp0.BoolField); err != nil {
				return err
			}

		case cn1:
			if err := c1.AssignTo(&sp0.Int4Array); err != nil {
				return err
			}

		case cn2:
			if err := c2.AssignTo(&sp0.Int8Array); err != nil {
				return err
			}

		case cn3:
			if err := c3.AssignTo(&sp0.TextField); err != nil {
				return err
			}

		case cn4:
			switch c4.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestampField = tmp
			default:
				if err := c4.AssignTo(&sp0.TimestampField); err != nil {
					return err
				}
			}

		case cn5:
			if err := c5.AssignTo(&sp0.UUIDArray); err != nil {
				return err
			}

		case cn6:
			if err := c6.AssignTo(&sp0.UUIDField); err != nil {
				return err
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example2ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example2ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example2ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// CombinedScanner scanner interface.
type CombinedScanner interface {
	Scan(e1 *Example1, e2 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errCombinedScanner struct {
	e error
}

func (t errCombinedScanner) Scan(e1 *Example1, e2 *Example2) error {
	return t.e
}

func (t errCombinedScanner) Next() bool {
	return false
}

func (t errCombinedScanner) Err() error {
	return t.e
}

func (t errCombinedScanner) Close() error {
	return nil
}

// NewCombinedScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCombinedScannerStatic(rows *sql.Rows, err error) CombinedScanner {
	if err != nil {
		return errCombinedScanner{e: err}
	}

	return combinedScannerStatic{
		Rows: rows,
	}
}

// combinedScannerStatic generated by genieql
type combinedScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t combinedScannerStatic) Scan(e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
		c26 pgtype.Bool
		c27 pgtype.Int4Array
		c28 pgtype.Int8Array
		c29 pgtype.Text
		c30 pgtype.Timestamptz
		c31 pgtype.UUIDArray
		c32 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32); err != nil {
		return err
	}

	if err := c0.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c23.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c26.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c27.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c30.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c30.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c31.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c32.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t combinedScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t combinedScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t combinedScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewCombinedScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCombinedScannerStaticRow(row *sql.Row) CombinedScannerStaticRow {
	return CombinedScannerStaticRow{
		row: row,
	}
}

// CombinedScannerStaticRow generated by genieql
type CombinedScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CombinedScannerStaticRow) Scan(e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
		c26 pgtype.Bool
		c27 pgtype.Int4Array
		c28 pgtype.Int8Array
		c29 pgtype.Text
		c30 pgtype.Timestamptz
		c31 pgtype.UUIDArray
		c32 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32); err != nil {
		return err
	}

	if err := c0.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c23.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c26.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c27.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c30.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c30.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c31.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c32.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t CombinedScannerStaticRow) Err(err error) CombinedScannerStaticRow {
	t.err = err
	return t
}

// CombinedScanner2 scanner interface.
type CombinedScanner2 interface {
	Scan(e1 *Example1, e2 *pkga.Example1) error
	Next() bool
	Close() error
	Err() error
}

type errCombinedScanner2 struct {
	e error
}

func (t errCombinedScanner2) Scan(e1 *Example1, e2 *pkga.Example1) error {
	return t.e
}

func (t errCombinedScanner2) Next() bool {
	return false
}

func (t errCombinedScanner2) Err() error {
	return t.e
}

func (t errCombinedScanner2) Close() error {
	return nil
}

// NewCombinedScanner2Static creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCombinedScanner2Static(rows *sql.Rows, err error) CombinedScanner2 {
	if err != nil {
		return errCombinedScanner2{e: err}
	}

	return combinedScanner2Static{
		Rows: rows,
	}
}

// combinedScanner2Static generated by genieql
type combinedScanner2Static struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t combinedScanner2Static) Scan(e1 *Example1, e2 *pkga.Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
		c26 pgtype.Int8
		c27 pgtype.Bit
		c28 pgtype.Varbit
		c29 pgtype.Bool
		c30 pgtype.Bytea
		c31 pgtype.Varchar
		c32 pgtype.BPChar
		c33 pgtype.CIDR
		c34 pgtype.Numeric
		c35 pgtype.Float8
		c36 pgtype.Inet
		c37 pgtype.Int2Array
		c38 pgtype.Int4Array
		c39 pgtype.Int8Array
		c40 pgtype.Int4
		c41 pgtype.Interval
		c42 pgtype.JSON
		c43 pgtype.JSONB
		c44 pgtype.Macaddr
		c45 pgtype.Numeric
		c46 pgtype.Float4
		c47 pgtype.Int2
		c48 pgtype.Text
		c49 pgtype.Timestamptz
		c50 pgtype.UUIDArray
		c51 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34, &c35, &c36, &c37, &c38, &c39, &c40, &c41, &c42, &c43, &c44, &c45, &c46, &c47, &c48, &c49, &c50, &c51); err != nil {
		return err
	}

	if err := c0.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c23.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c26.AssignTo(&e2.BigintField); err != nil {
		return err
	}

	if err := c27.AssignTo(&e2.BitField); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.BitVaryingField); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c30.AssignTo(&e2.ByteArrayField); err != nil {
		return err
	}

	if err := c31.AssignTo(&e2.CharacterField); err != nil {
		return err
	}

	if err := c32.AssignTo(&e2.CharacterFixedField); err != nil {
		return err
	}

	if err := c33.AssignTo(&e2.CidrField); err != nil {
		return err
	}

	if err := c34.AssignTo(&e2.DecimalField); err != nil {
		return err
	}

	if err := c35.AssignTo(&e2.DoublePrecisionField); err != nil {
		return err
	}

	if err := c36.AssignTo(&e2.InetField); err != nil {
		return err
	}

	if err := c37.AssignTo(&e2.Int2Array); err != nil {
		return err
	}

	if err := c38.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c39.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c40.AssignTo(&e2.IntField); err != nil {
		return err
	}

	if err := c41.AssignTo(&e2.IntervalField); err != nil {
		return err
	}

	if err := c42.AssignTo(&e2.JSONField); err != nil {
		return err
	}

	if err := c43.AssignTo(&e2.JsonbField); err != nil {
		return err
	}

	if err := c44.AssignTo(&e2.MacaddrField); err != nil {
		return err
	}

	if err := c45.AssignTo(&e2.NumericField); err != nil {
		return err
	}

	if err := c46.AssignTo(&e2.RealField); err != nil {
		return err
	}

	if err := c47.AssignTo(&e2.SmallintField); err != nil {
		return err
	}

	if err := c48.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c49.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c49.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c50.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c51.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t combinedScanner2Static) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t combinedScanner2Static) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t combinedScanner2Static) Next() bool {
	return t.Rows.Next()
}

// NewCombinedScanner2StaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCombinedScanner2StaticRow(row *sql.Row) CombinedScanner2StaticRow {
	return CombinedScanner2StaticRow{
		row: row,
	}
}

// CombinedScanner2StaticRow generated by genieql
type CombinedScanner2StaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CombinedScanner2StaticRow) Scan(e1 *Example1, e2 *pkga.Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 pgtype.UUIDArray
		c25 pgtype.UUID
		c26 pgtype.Int8
		c27 pgtype.Bit
		c28 pgtype.Varbit
		c29 pgtype.Bool
		c30 pgtype.Bytea
		c31 pgtype.Varchar
		c32 pgtype.BPChar
		c33 pgtype.CIDR
		c34 pgtype.Numeric
		c35 pgtype.Float8
		c36 pgtype.Inet
		c37 pgtype.Int2Array
		c38 pgtype.Int4Array
		c39 pgtype.Int8Array
		c40 pgtype.Int4
		c41 pgtype.Interval
		c42 pgtype.JSON
		c43 pgtype.JSONB
		c44 pgtype.Macaddr
		c45 pgtype.Numeric
		c46 pgtype.Float4
		c47 pgtype.Int2
		c48 pgtype.Text
		c49 pgtype.Timestamptz
		c50 pgtype.UUIDArray
		c51 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34, &c35, &c36, &c37, &c38, &c39, &c40, &c41, &c42, &c43, &c44, &c45, &c46, &c47, &c48, &c49, &c50, &c51); err != nil {
		return err
	}

	if err := c0.AssignTo(&e1.BigintField); err != nil {
		return err
	}

	if err := c1.AssignTo(&e1.BitField); err != nil {
		return err
	}

	if err := c2.AssignTo(&e1.BitVaryingField); err != nil {
		return err
	}

	if err := c3.AssignTo(&e1.BoolField); err != nil {
		return err
	}

	if err := c4.AssignTo(&e1.ByteArrayField); err != nil {
		return err
	}

	if err := c5.AssignTo(&e1.CharacterField); err != nil {
		return err
	}

	if err := c6.AssignTo(&e1.CharacterFixedField); err != nil {
		return err
	}

	if err := c7.AssignTo(&e1.CidrField); err != nil {
		return err
	}

	if err := c8.AssignTo(&e1.DecimalField); err != nil {
		return err
	}

	if err := c9.AssignTo(&e1.DoublePrecisionField); err != nil {
		return err
	}

	if err := c10.AssignTo(&e1.InetField); err != nil {
		return err
	}

	if err := c11.AssignTo(&e1.Int2Array); err != nil {
		return err
	}

	if err := c12.AssignTo(&e1.Int4Array); err != nil {
		return err
	}

	if err := c13.AssignTo(&e1.Int8Array); err != nil {
		return err
	}

	if err := c14.AssignTo(&e1.IntField); err != nil {
		return err
	}

	if err := c15.AssignTo(&e1.IntervalField); err != nil {
		return err
	}

	if err := c16.AssignTo(&e1.JSONField); err != nil {
		return err
	}

	if err := c17.AssignTo(&e1.JsonbField); err != nil {
		return err
	}

	if err := c18.AssignTo(&e1.MacaddrField); err != nil {
		return err
	}

	if err := c19.AssignTo(&e1.NumericField); err != nil {
		return err
	}

	if err := c20.AssignTo(&e1.RealField); err != nil {
		return err
	}

	if err := c21.AssignTo(&e1.SmallintField); err != nil {
		return err
	}

	if err := c22.AssignTo(&e1.TextField); err != nil {
		return err
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if err := c23.AssignTo(&e1.TimestampField); err != nil {
			return err
		}
	}

	if err := c24.AssignTo(&e1.UUIDArray); err != nil {
		return err
	}

	if err := c25.AssignTo(&e1.UUIDField); err != nil {
		return err
	}

	if err := c26.AssignTo(&e2.BigintField); err != nil {
		return err
	}

	if err := c27.AssignTo(&e2.BitField); err != nil {
		return err
	}

	if err := c28.AssignTo(&e2.BitVaryingField); err != nil {
		return err
	}

	if err := c29.AssignTo(&e2.BoolField); err != nil {
		return err
	}

	if err := c30.AssignTo(&e2.ByteArrayField); err != nil {
		return err
	}

	if err := c31.AssignTo(&e2.CharacterField); err != nil {
		return err
	}

	if err := c32.AssignTo(&e2.CharacterFixedField); err != nil {
		return err
	}

	if err := c33.AssignTo(&e2.CidrField); err != nil {
		return err
	}

	if err := c34.AssignTo(&e2.DecimalField); err != nil {
		return err
	}

	if err := c35.AssignTo(&e2.DoublePrecisionField); err != nil {
		return err
	}

	if err := c36.AssignTo(&e2.InetField); err != nil {
		return err
	}

	if err := c37.AssignTo(&e2.Int2Array); err != nil {
		return err
	}

	if err := c38.AssignTo(&e2.Int4Array); err != nil {
		return err
	}

	if err := c39.AssignTo(&e2.Int8Array); err != nil {
		return err
	}

	if err := c40.AssignTo(&e2.IntField); err != nil {
		return err
	}

	if err := c41.AssignTo(&e2.IntervalField); err != nil {
		return err
	}

	if err := c42.AssignTo(&e2.JSONField); err != nil {
		return err
	}

	if err := c43.AssignTo(&e2.JsonbField); err != nil {
		return err
	}

	if err := c44.AssignTo(&e2.MacaddrField); err != nil {
		return err
	}

	if err := c45.AssignTo(&e2.NumericField); err != nil {
		return err
	}

	if err := c46.AssignTo(&e2.RealField); err != nil {
		return err
	}

	if err := c47.AssignTo(&e2.SmallintField); err != nil {
		return err
	}

	if err := c48.AssignTo(&e2.TextField); err != nil {
		return err
	}

	switch c49.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if err := c49.AssignTo(&e2.TimestampField); err != nil {
			return err
		}
	}

	if err := c50.AssignTo(&e2.UUIDArray); err != nil {
		return err
	}

	if err := c51.AssignTo(&e2.UUIDField); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t CombinedScanner2StaticRow) Err(err error) CombinedScanner2StaticRow {
	t.err = err
	return t
}

// TimestampScanner scanner interface.
type TimestampScanner interface {
	Scan(sp0 *Timestamp) error
	Next() bool
	Close() error
	Err() error
}

type errTimestampScanner struct {
	e error
}

func (t errTimestampScanner) Scan(sp0 *Timestamp) error {
	return t.e
}

func (t errTimestampScanner) Next() bool {
	return false
}

func (t errTimestampScanner) Err() error {
	return t.e
}

func (t errTimestampScanner) Close() error {
	return nil
}

// TimestampScannerStaticColumns generated by genieql
const TimestampScannerStaticColumns = `"timestamp","timestamptz","timestamptz_nullable","uuid"`

// NewTimestampScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewTimestampScannerStatic(rows *sql.Rows, err error) TimestampScanner {
	if err != nil {
		return errTimestampScanner{e: err}
	}

	return timestampScannerStatic{
		Rows: rows,
	}
}

// timestampScannerStatic generated by genieql
type timestampScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t timestampScannerStatic) Scan(sp0 *Timestamp) error {
	var (
		c0 pgtype.Timestamptz
		c1 pgtype.Timestamptz
		c2 pgtype.Timestamptz
		c3 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	switch c0.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamp = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamp = tmp
	default:
		if err := c0.AssignTo(&sp0.Timestamp); err != nil {
			return err
		}
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamptz = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamptz = tmp
	default:
		if err := c1.AssignTo(&sp0.Timestamptz); err != nil {
			return err
		}
	}

	switch c2.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestamptzNullable = &tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestamptzNullable = &tmp
	default:
		if err := c2.AssignTo(&sp0.TimestamptzNullable); err != nil {
			return err
		}
	}

	if err := c3.AssignTo(&sp0.UUID); err != nil {
		return err
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t timestampScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t timestampScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t timestampScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewTimestampScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewTimestampScannerStaticRow(row *sql.Row) TimestampScannerStaticRow {
	return TimestampScannerStaticRow{
		row: row,
	}
}

// TimestampScannerStaticRow generated by genieql
type TimestampScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t TimestampScannerStaticRow) Scan(sp0 *Timestamp) error {
	var (
		c0 pgtype.Timestamptz
		c1 pgtype.Timestamptz
		c2 pgtype.Timestamptz
		c3 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	switch c0.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamp = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamp = tmp
	default:
		if err := c0.AssignTo(&sp0.Timestamp); err != nil {
			return err
		}
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamptz = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamptz = tmp
	default:
		if err := c1.AssignTo(&sp0.Timestamptz); err != nil {
			return err
		}
	}

	switch c2.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestamptzNullable = &tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestamptzNullable = &tmp
	default:
		if err := c2.AssignTo(&sp0.TimestamptzNullable); err != nil {
			return err
		}
	}

	if err := c3.AssignTo(&sp0.UUID); err != nil {
		return err
	}

	return nil
}

// Err set an error to return by scan
func (t TimestampScannerStaticRow) Err(err error) TimestampScannerStaticRow {
	t.err = err
	return t
}

// NewTimestampScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewTimestampScannerDynamic(rows *sql.Rows, err error) TimestampScanner {
	if err != nil {
		return errTimestampScanner{e: err}
	}

	return timestampScannerDynamic{
		Rows: rows,
	}
}

// timestampScannerDynamic generated by genieql
type timestampScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t timestampScannerDynamic) Scan(sp0 *Timestamp) error {
	const (
		cn0 = "timestamp"
		cn1 = "timestamptz"
		cn2 = "timestamptz_nullable"
		cn3 = "uuid"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Timestamptz
		c1      pgtype.Timestamptz
		c2      pgtype.Timestamptz
		c3      pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			switch c0.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.Timestamp = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.Timestamp = tmp
			default:
				if err := c0.AssignTo(&sp0.Timestamp); err != nil {
					return err
				}
			}

		case cn1:
			switch c1.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.Timestamptz = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.Timestamptz = tmp
			default:
				if err := c1.AssignTo(&sp0.Timestamptz); err != nil {
					return err
				}
			}

		case cn2:
			switch c2.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestamptzNullable = &tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestamptzNullable = &tmp
			default:
				if err := c2.AssignTo(&sp0.TimestamptzNullable); err != nil {
					return err
				}
			}

		case cn3:
			if err := c3.AssignTo(&sp0.UUID); err != nil {
				return err
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t timestampScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t timestampScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t timestampScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example1FindByX1 generated by genieql
// generates a function function based on the provided functional pattern and the query.
func Example1FindByX1(ctx context.Context, q sqlx.Queryer, i1, i2 int) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE id = $1 AND foo = $2`
	var (
		c0 pgtype.Int8 // i1
		c1 pgtype.Int8 // i2
	)
	if err := c0.Set(i1); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Set(i2); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1))
}

// Example1FindByBigintField generated by genieql
func Example1FindByBigintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int8) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bigint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByBitField generated by genieql
func Example1FindByBitField(ctx context.Context, q sqlx.Queryer, c pgtype.Bit) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bit_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByBitVaryingField generated by genieql
func Example1FindByBitVaryingField(ctx context.Context, q sqlx.Queryer, c pgtype.Varbit) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bit_varying_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByBoolField generated by genieql
func Example1FindByBoolField(ctx context.Context, q sqlx.Queryer, c pgtype.Bool) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bool_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByByteArrayField generated by genieql
func Example1FindByByteArrayField(ctx context.Context, q sqlx.Queryer, c pgtype.Bytea) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "byte_array_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByCharacterField generated by genieql
func Example1FindByCharacterField(ctx context.Context, q sqlx.Queryer, c pgtype.Varchar) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "character_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByCharacterFixedField generated by genieql
func Example1FindByCharacterFixedField(ctx context.Context, q sqlx.Queryer, c pgtype.BPChar) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "character_fixed_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByCidrField generated by genieql
func Example1FindByCidrField(ctx context.Context, q sqlx.Queryer, c pgtype.CIDR) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "cidr_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByDecimalField generated by genieql
func Example1FindByDecimalField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "decimal_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByDoublePrecisionField generated by genieql
func Example1FindByDoublePrecisionField(ctx context.Context, q sqlx.Queryer, c pgtype.Float8) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "double_precision_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInetField generated by genieql
func Example1FindByInetField(ctx context.Context, q sqlx.Queryer, c pgtype.Inet) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "inet_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt2Array generated by genieql
func Example1FindByInt2Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int2Array) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int2_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt4Array generated by genieql
func Example1FindByInt4Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int4Array) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int4_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt8Array generated by genieql
func Example1FindByInt8Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int8Array) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int8_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByIntField generated by genieql
func Example1FindByIntField(ctx context.Context, q sqlx.Queryer, c pgtype.Int4) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByIntervalField generated by genieql
func Example1FindByIntervalField(ctx context.Context, q sqlx.Queryer, c pgtype.Interval) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "interval_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByJSONField generated by genieql
func Example1FindByJSONField(ctx context.Context, q sqlx.Queryer, c pgtype.JSON) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "json_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByJsonbField generated by genieql
func Example1FindByJsonbField(ctx context.Context, q sqlx.Queryer, c pgtype.JSONB) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "jsonb_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByMacaddrField generated by genieql
func Example1FindByMacaddrField(ctx context.Context, q sqlx.Queryer, c pgtype.Macaddr) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "macaddr_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByNumericField generated by genieql
func Example1FindByNumericField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "numeric_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByRealField generated by genieql
func Example1FindByRealField(ctx context.Context, q sqlx.Queryer, c pgtype.Float4) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "real_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindBySmallintField generated by genieql
func Example1FindBySmallintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int2) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "smallint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTextField generated by genieql
func Example1FindByTextField(ctx context.Context, q sqlx.Queryer, c pgtype.Text) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "text_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTimestampField generated by genieql
func Example1FindByTimestampField(ctx context.Context, q sqlx.Queryer, c pgtype.Timestamptz) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "timestamp_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByUUIDArray generated by genieql
func Example1FindByUUIDArray(ctx context.Context, q sqlx.Queryer, c pgtype.UUIDArray) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByUUIDField generated by genieql
func Example1FindByUUIDField(ctx context.Context, q sqlx.Queryer, c pgtype.UUID) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1LookupByBigintField generated by genieql
func Example1LookupByBigintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int8) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bigint_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByBitField generated by genieql
func Example1LookupByBitField(ctx context.Context, q sqlx.Queryer, c pgtype.Bit) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bit_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByBitVaryingField generated by genieql
func Example1LookupByBitVaryingField(ctx context.Context, q sqlx.Queryer, c pgtype.Varbit) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bit_varying_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByBoolField generated by genieql
func Example1LookupByBoolField(ctx context.Context, q sqlx.Queryer, c pgtype.Bool) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bool_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByByteArrayField generated by genieql
func Example1LookupByByteArrayField(ctx context.Context, q sqlx.Queryer, c pgtype.Bytea) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "byte_array_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByCharacterField generated by genieql
func Example1LookupByCharacterField(ctx context.Context, q sqlx.Queryer, c pgtype.Varchar) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "character_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByCharacterFixedField generated by genieql
func Example1LookupByCharacterFixedField(ctx context.Context, q sqlx.Queryer, c pgtype.BPChar) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "character_fixed_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByCidrField generated by genieql
func Example1LookupByCidrField(ctx context.Context, q sqlx.Queryer, c pgtype.CIDR) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "cidr_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByDecimalField generated by genieql
func Example1LookupByDecimalField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "decimal_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByDoublePrecisionField generated by genieql
func Example1LookupByDoublePrecisionField(ctx context.Context, q sqlx.Queryer, c pgtype.Float8) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "double_precision_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInetField generated by genieql
func Example1LookupByInetField(ctx context.Context, q sqlx.Queryer, c pgtype.Inet) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "inet_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt2Array generated by genieql
func Example1LookupByInt2Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int2Array) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int2_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt4Array generated by genieql
func Example1LookupByInt4Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int4Array) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int4_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt8Array generated by genieql
func Example1LookupByInt8Array(ctx context.Context, q sqlx.Queryer, c pgtype.Int8Array) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int8_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByIntField generated by genieql
func Example1LookupByIntField(ctx context.Context, q sqlx.Queryer, c pgtype.Int4) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByIntervalField generated by genieql
func Example1LookupByIntervalField(ctx context.Context, q sqlx.Queryer, c pgtype.Interval) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "interval_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByJSONField generated by genieql
func Example1LookupByJSONField(ctx context.Context, q sqlx.Queryer, c pgtype.JSON) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "json_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByJsonbField generated by genieql
func Example1LookupByJsonbField(ctx context.Context, q sqlx.Queryer, c pgtype.JSONB) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "jsonb_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByMacaddrField generated by genieql
func Example1LookupByMacaddrField(ctx context.Context, q sqlx.Queryer, c pgtype.Macaddr) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "macaddr_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByNumericField generated by genieql
func Example1LookupByNumericField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "numeric_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByRealField generated by genieql
func Example1LookupByRealField(ctx context.Context, q sqlx.Queryer, c pgtype.Float4) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "real_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupBySmallintField generated by genieql
func Example1LookupBySmallintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int2) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "smallint_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByTextField generated by genieql
func Example1LookupByTextField(ctx context.Context, q sqlx.Queryer, c pgtype.Text) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "text_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByTimestampField generated by genieql
func Example1LookupByTimestampField(ctx context.Context, q sqlx.Queryer, c pgtype.Timestamptz) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "timestamp_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByUUIDArray generated by genieql
func Example1LookupByUUIDArray(ctx context.Context, q sqlx.Queryer, c pgtype.UUIDArray) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByUUIDField generated by genieql
func Example1LookupByUUIDField(ctx context.Context, q sqlx.Queryer, c pgtype.UUID) Example1Scanner {
	const query = `SELECT "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1InsertStaticColumns generated by genieql
const Example1InsertStaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT`

// Example1InsertExplode generated by genieql
func Example1InsertExplode(e *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray   // uuid_array
	)

	if err := c0.Set(e.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(e.BitField); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(e.BitVaryingField); err != nil {
		return []interface{}(nil), err
	}

	if err := c3.Set(e.BoolField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Set(e.ByteArrayField); err != nil {
		return []interface{}(nil), err
	}

	if err := c5.Set(e.CharacterField); err != nil {
		return []interface{}(nil), err
	}

	if err := c6.Set(e.CharacterFixedField); err != nil {
		return []interface{}(nil), err
	}

	if err := c7.Set(e.CidrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c8.Set(e.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c9.Set(e.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Set(e.InetField); err != nil {
		return []interface{}(nil), err
	}

	if err := c11.Set(e.Int2Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c12.Set(e.Int4Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Set(e.Int8Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Set(e.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Set(e.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c16.Set(e.JSONField); err != nil {
		return []interface{}(nil), err
	}

	if err := c17.Set(e.JsonbField); err != nil {
		return []interface{}(nil), err
	}

	if err := c18.Set(e.MacaddrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c19.Set(e.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c20.Set(e.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c21.Set(e.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c22.Set(e.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch e.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c23.Set(e.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c24.Set(e.UUIDArray); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24}, nil
}

// Example1Insert generated by genieql
// insert a single example1 record.
func Example1Insert(ctx context.Context, q sqlx.Queryer, e Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,DEFAULT) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bit         // bit_field
		c2  pgtype.Varbit      // bit_varying_field
		c3  pgtype.Bool        // bool_field
		c4  pgtype.Bytea       // byte_array_field
		c5  pgtype.Varchar     // character_field
		c6  pgtype.BPChar      // character_fixed_field
		c7  pgtype.CIDR        // cidr_field
		c8  pgtype.Numeric     // decimal_field
		c9  pgtype.Float8      // double_precision_field
		c10 pgtype.Inet        // inet_field
		c11 pgtype.Int2Array   // int2_array
		c12 pgtype.Int4Array   // int4_array
		c13 pgtype.Int8Array   // int8_array
		c14 pgtype.Int4        // int_field
		c15 pgtype.Interval    // interval_field
		c16 pgtype.JSON        // json_field
		c17 pgtype.JSONB       // jsonb_field
		c18 pgtype.Macaddr     // macaddr_field
		c19 pgtype.Numeric     // numeric_field
		c20 pgtype.Float4      // real_field
		c21 pgtype.Int2        // smallint_field
		c22 pgtype.Text        // text_field
		c23 pgtype.Timestamptz // timestamp_field
		c24 pgtype.UUIDArray
	)
	if err := c0.Set(e.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Set(e.BitField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c2.Set(e.BitVaryingField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c3.Set(e.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Set(e.ByteArrayField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c5.Set(e.CharacterField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c6.Set(e.CharacterFixedField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c7.Set(e.CidrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c8.Set(e.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c9.Set(e.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Set(e.InetField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c11.Set(e.Int2Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c12.Set(e.Int4Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Set(e.Int8Array); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Set(e.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Set(e.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c16.Set(e.JSONField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c17.Set(e.JsonbField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c18.Set(e.MacaddrField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c19.Set(e.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c20.Set(e.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c21.Set(e.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c22.Set(e.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch e.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c23.Set(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c23.Set(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c23.Set(e.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	if err := c24.Set(e.UUIDArray); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	} // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24))
}

// TimestampInsertStaticColumns generated by genieql
const TimestampInsertStaticColumns = `$1,$2,$3,$4`

// TimestampInsertExplode generated by genieql
func TimestampInsertExplode(e *Timestamp) ([]interface{}, error) {
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
		c3 pgtype.UUID        // uuid
	)

	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c0.Set(e.Timestamp); err != nil {
			return []interface{}(nil), err
		}
	}

	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c1.Set(e.Timestamptz); err != nil {
			return []interface{}(nil), err
		}
	}

	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c2.Set(e.TimestamptzNullable); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c3.Set(e.UUID); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3}, nil
}

// TimestampInsert generated by genieql
func TimestampInsert(ctx context.Context, q sqlx.Queryer, e Timestamp) TimestampScannerStaticRow {
	const query = `INSERT INTO timestamp_examples ("timestamp","timestamptz","timestamptz_nullable","uuid") VALUES ($1,$2,$3,$4) RETURNING "timestamp","timestamptz","timestamptz_nullable","uuid"`
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
		c3 pgtype.UUID
	)
	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c0.Set(e.Timestamp); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c1.Set(e.Timestamptz); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c2.Set(e.TimestamptzNullable); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	if err := c3.Set(e.UUID); err != nil {
		return NewTimestampScannerStaticRow(nil).Err(err)
	} // uuid
	return NewTimestampScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3))
}

// ConflictInsertStaticColumns generated by genieql
const ConflictInsertStaticColumns = `$1,$2,$3,$4`

// ConflictInsertExplode generated by genieql
func ConflictInsertExplode(e *Timestamp) ([]interface{}, error) {
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
		c3 pgtype.UUID        // uuid
	)

	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c0.Set(e.Timestamp); err != nil {
			return []interface{}(nil), err
		}
	}

	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c1.Set(e.Timestamptz); err != nil {
			return []interface{}(nil), err
		}
	}

	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c2.Set(e.TimestamptzNullable); err != nil {
			return []interface{}(nil), err
		}
	}

	if err := c3.Set(e.UUID); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3}, nil
}

// ConflictInsert generated by genieql
// create a merge insert
func ConflictInsert(ctx context.Context, q sqlx.Queryer, e Timestamp) TimestampScannerStaticRow {
	const query = `INSERT INTO timestamp_examples ("timestamp","timestamptz","timestamptz_nullable","uuid") VALUES ($1,$2,$3,$4) ON CONFLICT (id) DO NOTHING RETURNING "timestamp","timestamptz","timestamptz_nullable","uuid"`
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
		c3 pgtype.UUID
	)
	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c0.Set(e.Timestamp); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c1.Set(e.Timestamptz); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Set(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Set(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c2.Set(e.TimestamptzNullable); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	if err := c3.Set(e.UUID); err != nil {
		return NewTimestampScannerStaticRow(nil).Err(err)
	} // uuid
	return NewTimestampScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3))
}
