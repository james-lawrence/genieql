//go:build !genieql.ignore
// +build !genieql.ignore

package autocompile

import (
	"context"
	"database/sql"
	"math"
	"net"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/james-lawrence/genieql/examples/postgresql/autocompile/pkga"
	"github.com/james-lawrence/genieql/internal/sqlx"
)

// DO NOT EDIT: This File was auto generated by the following command:
// genieql auto -o genieql.gen.go
// invoked by go generate @ autocompile/genieql.cmd.go line 3

// Example1 generated by genieql
// Example1 ...
type Example1 struct {
	BigintField          int
	BoolField            bool
	CidrField            netip.Prefix
	DecimalField         float64
	DoublePrecisionField float64
	InetField            netip.Addr
	Int2Array            []int
	Int4Array            []int
	Int8Array            []int
	IntField             int
	IntervalField        time.Duration
	MacaddrField         net.HardwareAddr
	NumericField         float64
	RealField            float32
	SmallintField        int
	TextField            string
	TimestampField       time.Time
	UUIDArray            []string
	UUIDField            string
}

// Example2 generated by genieql
// Example2 ...
type Example2 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example3 generated by genieql
// Example3 ...
type Example3 struct {
	BoolField      bool
	Int4Array      []int
	Int8Array      []int
	TextField      string
	TimestampField time.Time
	UUIDArray      []string
	UUIDField      string
}

// Example4 generated by genieql
// Example4 ...
type Example4 struct {
	BoolField bool
	TextField string
	UUIDField string
}

// Example5 generated by genieql
// Example5 ...
type Example5 struct {
	Field1 int
	Field2 int
}

// Timestamp generated by genieql
type Timestamp struct {
	Timestamp           time.Time
	Timestamptz         time.Time
	TimestamptzNullable *time.Time
	UUID                string
}

// CustomScanner scanner interface.
type CustomScanner interface {
	Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error
	Next() bool
	Close() error
	Err() error
}

type errCustomScanner struct {
	e error
}

func (t errCustomScanner) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	return t.e
}

func (t errCustomScanner) Next() bool {
	return false
}

func (t errCustomScanner) Err() error {
	return t.e
}

func (t errCustomScanner) Close() error {
	return nil
}

// CustomScannerStaticColumns generated by genieql
const CustomScannerStaticColumns = `"i1","i2","b1","t1"`

// NewCustomScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCustomScannerStatic(rows *sql.Rows, err error) CustomScanner {
	if err != nil {
		return errCustomScanner{e: err}
	}

	return customScannerStatic{
		Rows: rows,
	}
}

// customScannerStatic generated by genieql
type customScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t customScannerStatic) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	var (
		c0 pgtype.Int8
		c1 pgtype.Int8
		c2 pgtype.Bool
		c3 pgtype.Timestamptz
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		*i1 = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		*i2 = vc1.(int)
	}

	if vc2, err := c2.Value(); err != nil {
		return err
	} else {
		*b1 = vc2.(bool)
	}

	switch c3.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*t1 = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*t1 = tmp
	default:
		if vc3, err := c3.Value(); err != nil {
			return err
		} else {
			*t1 = vc3.(time.Time)
		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t customScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t customScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t customScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewCustomScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCustomScannerStaticRow(row *sql.Row) CustomScannerStaticRow {
	return CustomScannerStaticRow{
		row: row,
	}
}

// CustomScannerStaticRow generated by genieql
type CustomScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CustomScannerStaticRow) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	var (
		c0 pgtype.Int8
		c1 pgtype.Int8
		c2 pgtype.Bool
		c3 pgtype.Timestamptz
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		*i1 = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		*i2 = vc1.(int)
	}

	if vc2, err := c2.Value(); err != nil {
		return err
	} else {
		*b1 = vc2.(bool)
	}

	switch c3.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		*t1 = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		*t1 = tmp
	default:
		if vc3, err := c3.Value(); err != nil {
			return err
		} else {
			*t1 = vc3.(time.Time)
		}
	}

	return nil
}

// Err set an error to return by scan
func (t CustomScannerStaticRow) Err(err error) CustomScannerStaticRow {
	t.err = err
	return t
}

// NewCustomScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewCustomScannerDynamic(rows *sql.Rows, err error) CustomScanner {
	if err != nil {
		return errCustomScanner{e: err}
	}

	return customScannerDynamic{
		Rows: rows,
	}
}

// customScannerDynamic generated by genieql
type customScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t customScannerDynamic) Scan(i1, i2 *int, b1 *bool, t1 *time.Time) error {
	const (
		cn0 = "i1"
		cn1 = "i2"
		cn2 = "b1"
		cn3 = "t1"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Int8
		c2      pgtype.Bool
		c3      pgtype.Timestamptz
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if vc0, err := c0.Value(); err != nil {
				return err
			} else {
				*i1 = vc0.(int)
			}

		case cn1:
			if vc1, err := c1.Value(); err != nil {
				return err
			} else {
				*i2 = vc1.(int)
			}

		case cn2:
			if vc2, err := c2.Value(); err != nil {
				return err
			} else {
				*b1 = vc2.(bool)
			}

		case cn3:
			switch c3.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				*t1 = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				*t1 = tmp
			default:
				if vc3, err := c3.Value(); err != nil {
					return err
				} else {
					*t1 = vc3.(time.Time)
				}
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t customScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t customScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t customScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example1Scanner scanner interface.
type Example1Scanner interface {
	Scan(sp0 *Example1) error
	Next() bool
	Close() error
	Err() error
}

type errExample1Scanner struct {
	e error
}

func (t errExample1Scanner) Scan(sp0 *Example1) error {
	return t.e
}

func (t errExample1Scanner) Next() bool {
	return false
}

func (t errExample1Scanner) Err() error {
	return t.e
}

func (t errExample1Scanner) Close() error {
	return nil
}

// Example1ScannerStaticColumns generated by genieql
const Example1ScannerStaticColumns = `"bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample1ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample1ScannerStatic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerStatic{
		Rows: rows,
	}
}

// example1ScannerStatic generated by genieql
type example1ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerStatic) Scan(sp0 *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		sp0.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		sp0.BoolField = vc1.(bool)
	}

	sp0.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		sp0.DoublePrecisionField = vc4.(float64)
	}

	sp0.InetField = c5

	sp0.Int2Array = c6

	sp0.Int4Array = c7

	sp0.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		sp0.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		sp0.IntervalField = vc10.(time.Duration)
	}

	sp0.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		sp0.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		sp0.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		sp0.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		sp0.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			sp0.TimestampField = vc16.(time.Time)
		}
	}

	sp0.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		sp0.UUIDField = vc18.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample1ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample1ScannerStaticRow(row *sql.Row) Example1ScannerStaticRow {
	return Example1ScannerStaticRow{
		row: row,
	}
}

// Example1ScannerStaticRow generated by genieql
type Example1ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example1ScannerStaticRow) Scan(sp0 *Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		sp0.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		sp0.BoolField = vc1.(bool)
	}

	sp0.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		sp0.DoublePrecisionField = vc4.(float64)
	}

	sp0.InetField = c5

	sp0.Int2Array = c6

	sp0.Int4Array = c7

	sp0.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		sp0.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		sp0.IntervalField = vc10.(time.Duration)
	}

	sp0.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		sp0.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		sp0.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		sp0.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		sp0.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			sp0.TimestampField = vc16.(time.Time)
		}
	}

	sp0.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		sp0.UUIDField = vc18.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t Example1ScannerStaticRow) Err(err error) Example1ScannerStaticRow {
	t.err = err
	return t
}

// NewExample1ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample1ScannerDynamic(rows *sql.Rows, err error) Example1Scanner {
	if err != nil {
		return errExample1Scanner{e: err}
	}

	return example1ScannerDynamic{
		Rows: rows,
	}
}

// example1ScannerDynamic generated by genieql
type example1ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example1ScannerDynamic) Scan(sp0 *Example1) error {
	const (
		cn0  = "bigint_field"
		cn1  = "bool_field"
		cn2  = "cidr_field"
		cn3  = "decimal_field"
		cn4  = "double_precision_field"
		cn5  = "inet_field"
		cn6  = "int2_array"
		cn7  = "int4_array"
		cn8  = "int8_array"
		cn9  = "int_field"
		cn10 = "interval_field"
		cn11 = "macaddr_field"
		cn12 = "numeric_field"
		cn13 = "real_field"
		cn14 = "smallint_field"
		cn15 = "text_field"
		cn16 = "timestamp_field"
		cn17 = "uuid_array"
		cn18 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Int8
		c1      pgtype.Bool
		c2      netip.Prefix
		c3      pgtype.Numeric
		c4      pgtype.Float8
		c5      netip.Addr
		c6      []int
		c7      []int
		c8      []int
		c9      pgtype.Int4
		c10     pgtype.Interval
		c11     net.HardwareAddr
		c12     pgtype.Numeric
		c13     pgtype.Float4
		c14     pgtype.Int2
		c15     pgtype.Text
		c16     pgtype.Timestamptz
		c17     []string
		c18     pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		case cn7:
			dst = append(dst, &c7)
		case cn8:
			dst = append(dst, &c8)
		case cn9:
			dst = append(dst, &c9)
		case cn10:
			dst = append(dst, &c10)
		case cn11:
			dst = append(dst, &c11)
		case cn12:
			dst = append(dst, &c12)
		case cn13:
			dst = append(dst, &c13)
		case cn14:
			dst = append(dst, &c14)
		case cn15:
			dst = append(dst, &c15)
		case cn16:
			dst = append(dst, &c16)
		case cn17:
			dst = append(dst, &c17)
		case cn18:
			dst = append(dst, &c18)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if vc0, err := c0.Value(); err != nil {
				return err
			} else {
				sp0.BigintField = vc0.(int)
			}

		case cn1:
			if vc1, err := c1.Value(); err != nil {
				return err
			} else {
				sp0.BoolField = vc1.(bool)
			}

		case cn2:
			sp0.CidrField = c2

		case cn3:
			if vc3, err := c3.Value(); err != nil {
				return err
			} else {
				sp0.DecimalField = vc3.(float64)
			}

		case cn4:
			if vc4, err := c4.Value(); err != nil {
				return err
			} else {
				sp0.DoublePrecisionField = vc4.(float64)
			}

		case cn5:
			sp0.InetField = c5

		case cn6:
			sp0.Int2Array = c6

		case cn7:
			sp0.Int4Array = c7

		case cn8:
			sp0.Int8Array = c8

		case cn9:
			if vc9, err := c9.Value(); err != nil {
				return err
			} else {
				sp0.IntField = vc9.(int)
			}

		case cn10:
			if vc10, err := c10.Value(); err != nil {
				return err
			} else {
				sp0.IntervalField = vc10.(time.Duration)
			}

		case cn11:
			sp0.MacaddrField = c11

		case cn12:
			if vc12, err := c12.Value(); err != nil {
				return err
			} else {
				sp0.NumericField = vc12.(float64)
			}

		case cn13:
			if vc13, err := c13.Value(); err != nil {
				return err
			} else {
				sp0.RealField = vc13.(float32)
			}

		case cn14:
			if vc14, err := c14.Value(); err != nil {
				return err
			} else {
				sp0.SmallintField = vc14.(int)
			}

		case cn15:
			if vc15, err := c15.Value(); err != nil {
				return err
			} else {
				sp0.TextField = vc15.(string)
			}

		case cn16:
			switch c16.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestampField = tmp
			default:
				if vc16, err := c16.Value(); err != nil {
					return err
				} else {
					sp0.TimestampField = vc16.(time.Time)
				}
			}

		case cn17:
			sp0.UUIDArray = c17

		case cn18:
			if vc18, err := c18.Value(); err != nil {
				return err
			} else {
				sp0.UUIDField = vc18.(string)
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example1ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example1ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example1ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example2Scanner scanner interface.
type Example2Scanner interface {
	Scan(sp0 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errExample2Scanner struct {
	e error
}

func (t errExample2Scanner) Scan(sp0 *Example2) error {
	return t.e
}

func (t errExample2Scanner) Next() bool {
	return false
}

func (t errExample2Scanner) Err() error {
	return t.e
}

func (t errExample2Scanner) Close() error {
	return nil
}

// Example2ScannerStaticColumns generated by genieql
const Example2ScannerStaticColumns = `"bool_field","int4_array","int8_array","text_field","timestamp_field","uuid_array","uuid_field"`

// NewExample2ScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExample2ScannerStatic(rows *sql.Rows, err error) Example2Scanner {
	if err != nil {
		return errExample2Scanner{e: err}
	}

	return example2ScannerStatic{
		Rows: rows,
	}
}

// example2ScannerStatic generated by genieql
type example2ScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example2ScannerStatic) Scan(sp0 *Example2) error {
	var (
		c0 pgtype.Bool
		c1 []int
		c2 []int
		c3 pgtype.Text
		c4 pgtype.Timestamptz
		c5 []string
		c6 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		sp0.BoolField = vc0.(bool)
	}

	sp0.Int4Array = c1

	sp0.Int8Array = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.TextField = vc3.(string)
	}

	switch c4.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if vc4, err := c4.Value(); err != nil {
			return err
		} else {
			sp0.TimestampField = vc4.(time.Time)
		}
	}

	sp0.UUIDArray = c5

	if vc6, err := c6.Value(); err != nil {
		return err
	} else {
		sp0.UUIDField = vc6.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example2ScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example2ScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example2ScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExample2ScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExample2ScannerStaticRow(row *sql.Row) Example2ScannerStaticRow {
	return Example2ScannerStaticRow{
		row: row,
	}
}

// Example2ScannerStaticRow generated by genieql
type Example2ScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t Example2ScannerStaticRow) Scan(sp0 *Example2) error {
	var (
		c0 pgtype.Bool
		c1 []int
		c2 []int
		c3 pgtype.Text
		c4 pgtype.Timestamptz
		c5 []string
		c6 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		sp0.BoolField = vc0.(bool)
	}

	sp0.Int4Array = c1

	sp0.Int8Array = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.TextField = vc3.(string)
	}

	switch c4.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestampField = tmp
	default:
		if vc4, err := c4.Value(); err != nil {
			return err
		} else {
			sp0.TimestampField = vc4.(time.Time)
		}
	}

	sp0.UUIDArray = c5

	if vc6, err := c6.Value(); err != nil {
		return err
	} else {
		sp0.UUIDField = vc6.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t Example2ScannerStaticRow) Err(err error) Example2ScannerStaticRow {
	t.err = err
	return t
}

// NewExample2ScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExample2ScannerDynamic(rows *sql.Rows, err error) Example2Scanner {
	if err != nil {
		return errExample2Scanner{e: err}
	}

	return example2ScannerDynamic{
		Rows: rows,
	}
}

// example2ScannerDynamic generated by genieql
type example2ScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t example2ScannerDynamic) Scan(sp0 *Example2) error {
	const (
		cn0 = "bool_field"
		cn1 = "int4_array"
		cn2 = "int8_array"
		cn3 = "text_field"
		cn4 = "timestamp_field"
		cn5 = "uuid_array"
		cn6 = "uuid_field"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Bool
		c1      []int
		c2      []int
		c3      pgtype.Text
		c4      pgtype.Timestamptz
		c5      []string
		c6      pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		case cn4:
			dst = append(dst, &c4)
		case cn5:
			dst = append(dst, &c5)
		case cn6:
			dst = append(dst, &c6)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if vc0, err := c0.Value(); err != nil {
				return err
			} else {
				sp0.BoolField = vc0.(bool)
			}

		case cn1:
			sp0.Int4Array = c1

		case cn2:
			sp0.Int8Array = c2

		case cn3:
			if vc3, err := c3.Value(); err != nil {
				return err
			} else {
				sp0.TextField = vc3.(string)
			}

		case cn4:
			switch c4.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestampField = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestampField = tmp
			default:
				if vc4, err := c4.Value(); err != nil {
					return err
				} else {
					sp0.TimestampField = vc4.(time.Time)
				}
			}

		case cn5:
			sp0.UUIDArray = c5

		case cn6:
			if vc6, err := c6.Value(); err != nil {
				return err
			} else {
				sp0.UUIDField = vc6.(string)
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t example2ScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t example2ScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t example2ScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// CombinedScanner scanner interface.
type CombinedScanner interface {
	Scan(e1 *Example1, e2 *Example2) error
	Next() bool
	Close() error
	Err() error
}

type errCombinedScanner struct {
	e error
}

func (t errCombinedScanner) Scan(e1 *Example1, e2 *Example2) error {
	return t.e
}

func (t errCombinedScanner) Next() bool {
	return false
}

func (t errCombinedScanner) Err() error {
	return t.e
}

func (t errCombinedScanner) Close() error {
	return nil
}

// NewCombinedScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCombinedScannerStatic(rows *sql.Rows, err error) CombinedScanner {
	if err != nil {
		return errCombinedScanner{e: err}
	}

	return combinedScannerStatic{
		Rows: rows,
	}
}

// combinedScannerStatic generated by genieql
type combinedScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t combinedScannerStatic) Scan(e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
		c19 pgtype.Bool
		c20 []int
		c21 []int
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 []string
		c25 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc1.(bool)
	}

	e1.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc4.(float64)
	}

	e1.InetField = c5

	e1.Int2Array = c6

	e1.Int4Array = c7

	e1.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc10.(time.Duration)
	}

	e1.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc16.(time.Time)
		}
	}

	e1.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc18.(string)
	}

	if vc19, err := c19.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc19.(bool)
	}

	e2.Int4Array = c20

	e2.Int8Array = c21

	if vc22, err := c22.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc22.(string)
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc23, err := c23.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc23.(time.Time)
		}
	}

	e2.UUIDArray = c24

	if vc25, err := c25.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc25.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t combinedScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t combinedScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t combinedScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewCombinedScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCombinedScannerStaticRow(row *sql.Row) CombinedScannerStaticRow {
	return CombinedScannerStaticRow{
		row: row,
	}
}

// CombinedScannerStaticRow generated by genieql
type CombinedScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CombinedScannerStaticRow) Scan(e1 *Example1, e2 *Example2) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
		c19 pgtype.Bool
		c20 []int
		c21 []int
		c22 pgtype.Text
		c23 pgtype.Timestamptz
		c24 []string
		c25 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc1.(bool)
	}

	e1.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc4.(float64)
	}

	e1.InetField = c5

	e1.Int2Array = c6

	e1.Int4Array = c7

	e1.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc10.(time.Duration)
	}

	e1.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc16.(time.Time)
		}
	}

	e1.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc18.(string)
	}

	if vc19, err := c19.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc19.(bool)
	}

	e2.Int4Array = c20

	e2.Int8Array = c21

	if vc22, err := c22.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc22.(string)
	}

	switch c23.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc23, err := c23.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc23.(time.Time)
		}
	}

	e2.UUIDArray = c24

	if vc25, err := c25.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc25.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t CombinedScannerStaticRow) Err(err error) CombinedScannerStaticRow {
	t.err = err
	return t
}

// CombinedScanner2 scanner interface.
type CombinedScanner2 interface {
	Scan(e1 *Example1, e2 *pkga.Example1) error
	Next() bool
	Close() error
	Err() error
}

type errCombinedScanner2 struct {
	e error
}

func (t errCombinedScanner2) Scan(e1 *Example1, e2 *pkga.Example1) error {
	return t.e
}

func (t errCombinedScanner2) Next() bool {
	return false
}

func (t errCombinedScanner2) Err() error {
	return t.e
}

func (t errCombinedScanner2) Close() error {
	return nil
}

// NewCombinedScanner2Static creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewCombinedScanner2Static(rows *sql.Rows, err error) CombinedScanner2 {
	if err != nil {
		return errCombinedScanner2{e: err}
	}

	return combinedScanner2Static{
		Rows: rows,
	}
}

// combinedScanner2Static generated by genieql
type combinedScanner2Static struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t combinedScanner2Static) Scan(e1 *Example1, e2 *pkga.Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
		c19 pgtype.Int8
		c20 pgtype.Bool
		c21 netip.Prefix
		c22 pgtype.Numeric
		c23 pgtype.Float8
		c24 netip.Addr
		c25 []int
		c26 []int
		c27 []int
		c28 pgtype.Int4
		c29 pgtype.Interval
		c30 net.HardwareAddr
		c31 pgtype.Numeric
		c32 pgtype.Float4
		c33 pgtype.Int2
		c34 pgtype.Text
		c35 pgtype.Timestamptz
		c36 []string
		c37 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34, &c35, &c36, &c37); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc1.(bool)
	}

	e1.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc4.(float64)
	}

	e1.InetField = c5

	e1.Int2Array = c6

	e1.Int4Array = c7

	e1.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc10.(time.Duration)
	}

	e1.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc16.(time.Time)
		}
	}

	e1.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc18.(string)
	}

	if vc19, err := c19.Value(); err != nil {
		return err
	} else {
		e2.BigintField = vc19.(int)
	}

	if vc20, err := c20.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc20.(bool)
	}

	e2.CidrField = c21

	if vc22, err := c22.Value(); err != nil {
		return err
	} else {
		e2.DecimalField = vc22.(float64)
	}

	if vc23, err := c23.Value(); err != nil {
		return err
	} else {
		e2.DoublePrecisionField = vc23.(float64)
	}

	e2.InetField = c24

	e2.Int2Array = c25

	e2.Int4Array = c26

	e2.Int8Array = c27

	if vc28, err := c28.Value(); err != nil {
		return err
	} else {
		e2.IntField = vc28.(int)
	}

	if vc29, err := c29.Value(); err != nil {
		return err
	} else {
		e2.IntervalField = vc29.(time.Duration)
	}

	e2.MacaddrField = c30

	if vc31, err := c31.Value(); err != nil {
		return err
	} else {
		e2.NumericField = vc31.(float64)
	}

	if vc32, err := c32.Value(); err != nil {
		return err
	} else {
		e2.RealField = vc32.(float32)
	}

	if vc33, err := c33.Value(); err != nil {
		return err
	} else {
		e2.SmallintField = vc33.(int)
	}

	if vc34, err := c34.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc34.(string)
	}

	switch c35.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc35, err := c35.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc35.(time.Time)
		}
	}

	e2.UUIDArray = c36

	if vc37, err := c37.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc37.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t combinedScanner2Static) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t combinedScanner2Static) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t combinedScanner2Static) Next() bool {
	return t.Rows.Next()
}

// NewCombinedScanner2StaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewCombinedScanner2StaticRow(row *sql.Row) CombinedScanner2StaticRow {
	return CombinedScanner2StaticRow{
		row: row,
	}
}

// CombinedScanner2StaticRow generated by genieql
type CombinedScanner2StaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t CombinedScanner2StaticRow) Scan(e1 *Example1, e2 *pkga.Example1) error {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bool
		c2  netip.Prefix
		c3  pgtype.Numeric
		c4  pgtype.Float8
		c5  netip.Addr
		c6  []int
		c7  []int
		c8  []int
		c9  pgtype.Int4
		c10 pgtype.Interval
		c11 net.HardwareAddr
		c12 pgtype.Numeric
		c13 pgtype.Float4
		c14 pgtype.Int2
		c15 pgtype.Text
		c16 pgtype.Timestamptz
		c17 []string
		c18 pgtype.UUID
		c19 pgtype.Int8
		c20 pgtype.Bool
		c21 netip.Prefix
		c22 pgtype.Numeric
		c23 pgtype.Float8
		c24 netip.Addr
		c25 []int
		c26 []int
		c27 []int
		c28 pgtype.Int4
		c29 pgtype.Interval
		c30 net.HardwareAddr
		c31 pgtype.Numeric
		c32 pgtype.Float4
		c33 pgtype.Int2
		c34 pgtype.Text
		c35 pgtype.Timestamptz
		c36 []string
		c37 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25, &c26, &c27, &c28, &c29, &c30, &c31, &c32, &c33, &c34, &c35, &c36, &c37); err != nil {
		return err
	}

	if vc0, err := c0.Value(); err != nil {
		return err
	} else {
		e1.BigintField = vc0.(int)
	}

	if vc1, err := c1.Value(); err != nil {
		return err
	} else {
		e1.BoolField = vc1.(bool)
	}

	e1.CidrField = c2

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		e1.DecimalField = vc3.(float64)
	}

	if vc4, err := c4.Value(); err != nil {
		return err
	} else {
		e1.DoublePrecisionField = vc4.(float64)
	}

	e1.InetField = c5

	e1.Int2Array = c6

	e1.Int4Array = c7

	e1.Int8Array = c8

	if vc9, err := c9.Value(); err != nil {
		return err
	} else {
		e1.IntField = vc9.(int)
	}

	if vc10, err := c10.Value(); err != nil {
		return err
	} else {
		e1.IntervalField = vc10.(time.Duration)
	}

	e1.MacaddrField = c11

	if vc12, err := c12.Value(); err != nil {
		return err
	} else {
		e1.NumericField = vc12.(float64)
	}

	if vc13, err := c13.Value(); err != nil {
		return err
	} else {
		e1.RealField = vc13.(float32)
	}

	if vc14, err := c14.Value(); err != nil {
		return err
	} else {
		e1.SmallintField = vc14.(int)
	}

	if vc15, err := c15.Value(); err != nil {
		return err
	} else {
		e1.TextField = vc15.(string)
	}

	switch c16.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e1.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e1.TimestampField = tmp
	default:
		if vc16, err := c16.Value(); err != nil {
			return err
		} else {
			e1.TimestampField = vc16.(time.Time)
		}
	}

	e1.UUIDArray = c17

	if vc18, err := c18.Value(); err != nil {
		return err
	} else {
		e1.UUIDField = vc18.(string)
	}

	if vc19, err := c19.Value(); err != nil {
		return err
	} else {
		e2.BigintField = vc19.(int)
	}

	if vc20, err := c20.Value(); err != nil {
		return err
	} else {
		e2.BoolField = vc20.(bool)
	}

	e2.CidrField = c21

	if vc22, err := c22.Value(); err != nil {
		return err
	} else {
		e2.DecimalField = vc22.(float64)
	}

	if vc23, err := c23.Value(); err != nil {
		return err
	} else {
		e2.DoublePrecisionField = vc23.(float64)
	}

	e2.InetField = c24

	e2.Int2Array = c25

	e2.Int4Array = c26

	e2.Int8Array = c27

	if vc28, err := c28.Value(); err != nil {
		return err
	} else {
		e2.IntField = vc28.(int)
	}

	if vc29, err := c29.Value(); err != nil {
		return err
	} else {
		e2.IntervalField = vc29.(time.Duration)
	}

	e2.MacaddrField = c30

	if vc31, err := c31.Value(); err != nil {
		return err
	} else {
		e2.NumericField = vc31.(float64)
	}

	if vc32, err := c32.Value(); err != nil {
		return err
	} else {
		e2.RealField = vc32.(float32)
	}

	if vc33, err := c33.Value(); err != nil {
		return err
	} else {
		e2.SmallintField = vc33.(int)
	}

	if vc34, err := c34.Value(); err != nil {
		return err
	} else {
		e2.TextField = vc34.(string)
	}

	switch c35.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		e2.TimestampField = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		e2.TimestampField = tmp
	default:
		if vc35, err := c35.Value(); err != nil {
			return err
		} else {
			e2.TimestampField = vc35.(time.Time)
		}
	}

	e2.UUIDArray = c36

	if vc37, err := c37.Value(); err != nil {
		return err
	} else {
		e2.UUIDField = vc37.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t CombinedScanner2StaticRow) Err(err error) CombinedScanner2StaticRow {
	t.err = err
	return t
}

// TimestampScanner scanner interface.
type TimestampScanner interface {
	Scan(sp0 *Timestamp) error
	Next() bool
	Close() error
	Err() error
}

type errTimestampScanner struct {
	e error
}

func (t errTimestampScanner) Scan(sp0 *Timestamp) error {
	return t.e
}

func (t errTimestampScanner) Next() bool {
	return false
}

func (t errTimestampScanner) Err() error {
	return t.e
}

func (t errTimestampScanner) Close() error {
	return nil
}

// TimestampScannerStaticColumns generated by genieql
const TimestampScannerStaticColumns = `"timestamp","timestamptz","timestamptz_nullable","uuid"`

// NewTimestampScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewTimestampScannerStatic(rows *sql.Rows, err error) TimestampScanner {
	if err != nil {
		return errTimestampScanner{e: err}
	}

	return timestampScannerStatic{
		Rows: rows,
	}
}

// timestampScannerStatic generated by genieql
type timestampScannerStatic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t timestampScannerStatic) Scan(sp0 *Timestamp) error {
	var (
		c0 pgtype.Timestamptz
		c1 pgtype.Timestamptz
		c2 pgtype.Timestamptz
		c3 pgtype.UUID
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	switch c0.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamp = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamp = tmp
	default:
		if vc0, err := c0.Value(); err != nil {
			return err
		} else {
			sp0.Timestamp = vc0.(time.Time)
		}
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamptz = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamptz = tmp
	default:
		if vc1, err := c1.Value(); err != nil {
			return err
		} else {
			sp0.Timestamptz = vc1.(time.Time)
		}
	}

	switch c2.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestamptzNullable = &tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestamptzNullable = &tmp
	default:
		if vc2, err := c2.Value(); err != nil {
			return err
		} else {
			sp0.TimestamptzNullable = vc2.(*time.Time)
		}
	}

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.UUID = vc3.(string)
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t timestampScannerStatic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t timestampScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t timestampScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewTimestampScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewTimestampScannerStaticRow(row *sql.Row) TimestampScannerStaticRow {
	return TimestampScannerStaticRow{
		row: row,
	}
}

// TimestampScannerStaticRow generated by genieql
type TimestampScannerStaticRow struct {
	err error
	row *sql.Row
}

// Scan generated by genieql
func (t TimestampScannerStaticRow) Scan(sp0 *Timestamp) error {
	var (
		c0 pgtype.Timestamptz
		c1 pgtype.Timestamptz
		c2 pgtype.Timestamptz
		c3 pgtype.UUID
	)

	if t.err != nil {
		return t.err
	}

	if err := t.row.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	switch c0.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamp = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamp = tmp
	default:
		if vc0, err := c0.Value(); err != nil {
			return err
		} else {
			sp0.Timestamp = vc0.(time.Time)
		}
	}

	switch c1.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.Timestamptz = tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.Timestamptz = tmp
	default:
		if vc1, err := c1.Value(); err != nil {
			return err
		} else {
			sp0.Timestamptz = vc1.(time.Time)
		}
	}

	switch c2.InfinityModifier {
	case pgtype.Infinity:
		tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
		sp0.TimestamptzNullable = &tmp
	case pgtype.NegativeInfinity:
		tmp := time.Unix(math.MinInt64, math.MinInt64)
		sp0.TimestamptzNullable = &tmp
	default:
		if vc2, err := c2.Value(); err != nil {
			return err
		} else {
			sp0.TimestamptzNullable = vc2.(*time.Time)
		}
	}

	if vc3, err := c3.Value(); err != nil {
		return err
	} else {
		sp0.UUID = vc3.(string)
	}

	return nil
}

// Err set an error to return by scan
func (t TimestampScannerStaticRow) Err(err error) TimestampScannerStaticRow {
	t.err = err
	return t
}

// NewTimestampScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewTimestampScannerDynamic(rows *sql.Rows, err error) TimestampScanner {
	if err != nil {
		return errTimestampScanner{e: err}
	}

	return timestampScannerDynamic{
		Rows: rows,
	}
}

// timestampScannerDynamic generated by genieql
type timestampScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t timestampScannerDynamic) Scan(sp0 *Timestamp) error {
	const (
		cn0 = "timestamp"
		cn1 = "timestamptz"
		cn2 = "timestamptz_nullable"
		cn3 = "uuid"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Timestamptz
		c1      pgtype.Timestamptz
		c2      pgtype.Timestamptz
		c3      pgtype.UUID
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			switch c0.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.Timestamp = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.Timestamp = tmp
			default:
				if vc0, err := c0.Value(); err != nil {
					return err
				} else {
					sp0.Timestamp = vc0.(time.Time)
				}
			}

		case cn1:
			switch c1.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.Timestamptz = tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.Timestamptz = tmp
			default:
				if vc1, err := c1.Value(); err != nil {
					return err
				} else {
					sp0.Timestamptz = vc1.(time.Time)
				}
			}

		case cn2:
			switch c2.InfinityModifier {
			case pgtype.Infinity:
				tmp := time.Unix(math.MaxInt64-62135596800, 999999999)
				sp0.TimestamptzNullable = &tmp
			case pgtype.NegativeInfinity:
				tmp := time.Unix(math.MinInt64, math.MinInt64)
				sp0.TimestamptzNullable = &tmp
			default:
				if vc2, err := c2.Value(); err != nil {
					return err
				} else {
					sp0.TimestamptzNullable = vc2.(*time.Time)
				}
			}

		case cn3:
			if vc3, err := c3.Value(); err != nil {
				return err
			} else {
				sp0.UUID = vc3.(string)
			}

		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t timestampScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t timestampScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t timestampScannerDynamic) Next() bool {
	return t.Rows.Next()
}

// Example1FindByX1 generated by genieql
// generates a function function based on the provided functional pattern and the query.
func Example1FindByX1(ctx context.Context, q sqlx.Queryer, i1, i2 int) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE id = $1 AND foo = $2`
	var (
		c0 pgtype.Int8 // i1
		c1 pgtype.Int8 // i2
	)
	if err := c0.Scan(i1); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Scan(i2); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1))
}

// Example1FindByBigintField generated by genieql
func Example1FindByBigintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int8) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bigint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByBoolField generated by genieql
func Example1FindByBoolField(ctx context.Context, q sqlx.Queryer, c pgtype.Bool) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bool_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByCidrField generated by genieql
func Example1FindByCidrField(ctx context.Context, q sqlx.Queryer, c netip.Prefix) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "cidr_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByDecimalField generated by genieql
func Example1FindByDecimalField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "decimal_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByDoublePrecisionField generated by genieql
func Example1FindByDoublePrecisionField(ctx context.Context, q sqlx.Queryer, c pgtype.Float8) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "double_precision_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInetField generated by genieql
func Example1FindByInetField(ctx context.Context, q sqlx.Queryer, c netip.Addr) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "inet_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt2Array generated by genieql
func Example1FindByInt2Array(ctx context.Context, q sqlx.Queryer, c []int) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int2_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt4Array generated by genieql
func Example1FindByInt4Array(ctx context.Context, q sqlx.Queryer, c []int) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int4_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByInt8Array generated by genieql
func Example1FindByInt8Array(ctx context.Context, q sqlx.Queryer, c []int) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int8_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByIntField generated by genieql
func Example1FindByIntField(ctx context.Context, q sqlx.Queryer, c pgtype.Int4) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByIntervalField generated by genieql
func Example1FindByIntervalField(ctx context.Context, q sqlx.Queryer, c pgtype.Interval) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "interval_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByMacaddrField generated by genieql
func Example1FindByMacaddrField(ctx context.Context, q sqlx.Queryer, c net.HardwareAddr) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "macaddr_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByNumericField generated by genieql
func Example1FindByNumericField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "numeric_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByRealField generated by genieql
func Example1FindByRealField(ctx context.Context, q sqlx.Queryer, c pgtype.Float4) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "real_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindBySmallintField generated by genieql
func Example1FindBySmallintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int2) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "smallint_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTextField generated by genieql
func Example1FindByTextField(ctx context.Context, q sqlx.Queryer, c pgtype.Text) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "text_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByTimestampField generated by genieql
func Example1FindByTimestampField(ctx context.Context, q sqlx.Queryer, c pgtype.Timestamptz) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "timestamp_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByUUIDArray generated by genieql
func Example1FindByUUIDArray(ctx context.Context, q sqlx.Queryer, c []string) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_array" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1FindByUUIDField generated by genieql
func Example1FindByUUIDField(ctx context.Context, q sqlx.Queryer, c pgtype.UUID) Example1ScannerStaticRow {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_field" = $1`
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c))
}

// Example1LookupByBigintField generated by genieql
func Example1LookupByBigintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int8) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bigint_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByBoolField generated by genieql
func Example1LookupByBoolField(ctx context.Context, q sqlx.Queryer, c pgtype.Bool) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "bool_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByCidrField generated by genieql
func Example1LookupByCidrField(ctx context.Context, q sqlx.Queryer, c netip.Prefix) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "cidr_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByDecimalField generated by genieql
func Example1LookupByDecimalField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "decimal_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByDoublePrecisionField generated by genieql
func Example1LookupByDoublePrecisionField(ctx context.Context, q sqlx.Queryer, c pgtype.Float8) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "double_precision_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInetField generated by genieql
func Example1LookupByInetField(ctx context.Context, q sqlx.Queryer, c netip.Addr) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "inet_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt2Array generated by genieql
func Example1LookupByInt2Array(ctx context.Context, q sqlx.Queryer, c []int) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int2_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt4Array generated by genieql
func Example1LookupByInt4Array(ctx context.Context, q sqlx.Queryer, c []int) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int4_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByInt8Array generated by genieql
func Example1LookupByInt8Array(ctx context.Context, q sqlx.Queryer, c []int) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int8_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByIntField generated by genieql
func Example1LookupByIntField(ctx context.Context, q sqlx.Queryer, c pgtype.Int4) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "int_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByIntervalField generated by genieql
func Example1LookupByIntervalField(ctx context.Context, q sqlx.Queryer, c pgtype.Interval) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "interval_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByMacaddrField generated by genieql
func Example1LookupByMacaddrField(ctx context.Context, q sqlx.Queryer, c net.HardwareAddr) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "macaddr_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByNumericField generated by genieql
func Example1LookupByNumericField(ctx context.Context, q sqlx.Queryer, c pgtype.Numeric) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "numeric_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByRealField generated by genieql
func Example1LookupByRealField(ctx context.Context, q sqlx.Queryer, c pgtype.Float4) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "real_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupBySmallintField generated by genieql
func Example1LookupBySmallintField(ctx context.Context, q sqlx.Queryer, c pgtype.Int2) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "smallint_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByTextField generated by genieql
func Example1LookupByTextField(ctx context.Context, q sqlx.Queryer, c pgtype.Text) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "text_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByTimestampField generated by genieql
func Example1LookupByTimestampField(ctx context.Context, q sqlx.Queryer, c pgtype.Timestamptz) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "timestamp_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByUUIDArray generated by genieql
func Example1LookupByUUIDArray(ctx context.Context, q sqlx.Queryer, c []string) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_array" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1LookupByUUIDField generated by genieql
func Example1LookupByUUIDField(ctx context.Context, q sqlx.Queryer, c pgtype.UUID) Example1Scanner {
	const query = `SELECT "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field" FROM example1 WHERE "uuid_field" = $1`
	return NewExample1ScannerStatic(q.QueryContext(ctx, query, c))
}

// Example1InsertStaticColumns generated by genieql
const Example1InsertStaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT`

// Example1InsertExplode generated by genieql
func Example1InsertExplode(e *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string           // uuid_array
	)

	if err := c0.Scan(e.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Scan(e.BoolField); err != nil {
		return []interface{}(nil), err
	}

	c2 = e.CidrField

	if err := c3.Scan(e.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Scan(e.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	c5 = e.InetField

	c6 = e.Int2Array

	c7 = e.Int4Array

	c8 = e.Int8Array

	if err := c9.Scan(e.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Scan(e.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	c11 = e.MacaddrField

	if err := c12.Scan(e.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Scan(e.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Scan(e.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Scan(e.TextField); err != nil {
		return []interface{}(nil), err
	}

	switch e.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c16.Scan(e.TimestampField); err != nil {
			return []interface{}(nil), err
		}
	}

	c17 = e.UUIDArray

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17}, nil
}

// Example1Insert generated by genieql
// insert a single example1 record.
func Example1Insert(ctx context.Context, q sqlx.Queryer, e Example1) Example1ScannerStaticRow {
	const query = `INSERT INTO example1 ("bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,DEFAULT) RETURNING "bigint_field","bool_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
	var (
		c0  pgtype.Int8        // bigint_field
		c1  pgtype.Bool        // bool_field
		c2  netip.Prefix       // cidr_field
		c3  pgtype.Numeric     // decimal_field
		c4  pgtype.Float8      // double_precision_field
		c5  netip.Addr         // inet_field
		c6  []int              // int2_array
		c7  []int              // int4_array
		c8  []int              // int8_array
		c9  pgtype.Int4        // int_field
		c10 pgtype.Interval    // interval_field
		c11 net.HardwareAddr   // macaddr_field
		c12 pgtype.Numeric     // numeric_field
		c13 pgtype.Float4      // real_field
		c14 pgtype.Int2        // smallint_field
		c15 pgtype.Text        // text_field
		c16 pgtype.Timestamptz // timestamp_field
		c17 []string
	)
	if err := c0.Scan(e.BigintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c1.Scan(e.BoolField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c2 = e.CidrField
	if err := c3.Scan(e.DecimalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c4.Scan(e.DoublePrecisionField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c5 = e.InetField
	c6 = e.Int2Array
	c7 = e.Int4Array
	c8 = e.Int8Array
	if err := c9.Scan(e.IntField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c10.Scan(e.IntervalField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	c11 = e.MacaddrField
	if err := c12.Scan(e.NumericField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c13.Scan(e.RealField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c14.Scan(e.SmallintField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	if err := c15.Scan(e.TextField); err != nil {
		return NewExample1ScannerStaticRow(nil).Err(err)
	}
	switch e.TimestampField {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c16.Scan(pgtype.Infinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c16.Scan(pgtype.NegativeInfinity); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c16.Scan(e.TimestampField); err != nil {
			return NewExample1ScannerStaticRow(nil).Err(err)
		}
	}
	c17 = e.UUIDArray // uuid_array
	return NewExample1ScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17))
}

// TimestampInsertStaticColumns generated by genieql
const TimestampInsertStaticColumns = `$1,$2,$3,DEFAULT`

// TimestampInsertExplode generated by genieql
func TimestampInsertExplode(e *Timestamp) ([]interface{}, error) {
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
	)

	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c0.Scan(e.Timestamp); err != nil {
			return []interface{}(nil), err
		}
	}

	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c1.Scan(e.Timestamptz); err != nil {
			return []interface{}(nil), err
		}
	}

	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c2.Scan(e.TimestamptzNullable); err != nil {
			return []interface{}(nil), err
		}
	}

	return []interface{}{c0, c1, c2}, nil
}

// TimestampInsert generated by genieql
func TimestampInsert(ctx context.Context, q sqlx.Queryer, e Timestamp) TimestampScannerStaticRow {
	const query = `INSERT INTO timestamp_examples ("timestamp","timestamptz","timestamptz_nullable","uuid") VALUES ($1,$2,$3,DEFAULT) RETURNING "timestamp","timestamptz","timestamptz_nullable","uuid"`
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz
	)
	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c0.Scan(e.Timestamp); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c1.Scan(e.Timestamptz); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c2.Scan(e.TimestamptzNullable); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	} // timestamptz_nullable
	return NewTimestampScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2))
}

// ConflictInsertStaticColumns generated by genieql
const ConflictInsertStaticColumns = `$1,$2,$3,DEFAULT`

// ConflictInsertExplode generated by genieql
func ConflictInsertExplode(e *Timestamp) ([]interface{}, error) {
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz // timestamptz_nullable
	)

	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c0.Scan(e.Timestamp); err != nil {
			return []interface{}(nil), err
		}
	}

	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c1.Scan(e.Timestamptz); err != nil {
			return []interface{}(nil), err
		}
	}

	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Scan(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Scan(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c2.Scan(e.TimestamptzNullable); err != nil {
			return []interface{}(nil), err
		}
	}

	return []interface{}{c0, c1, c2}, nil
}

// ConflictInsert generated by genieql
// create a merge insert
func ConflictInsert(ctx context.Context, q sqlx.Queryer, e Timestamp) TimestampScannerStaticRow {
	const query = `INSERT INTO timestamp_examples ("timestamp","timestamptz","timestamptz_nullable","uuid") VALUES ($1,$2,$3,DEFAULT) ON CONFLICT (uuid) DO NOTHING RETURNING "timestamp","timestamptz","timestamptz_nullable","uuid"`
	var (
		c0 pgtype.Timestamptz // timestamp
		c1 pgtype.Timestamptz // timestamptz
		c2 pgtype.Timestamptz
	)
	switch e.Timestamp {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c0.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c0.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c0.Scan(e.Timestamp); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch e.Timestamptz {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c1.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c1.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c1.Scan(e.Timestamptz); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	}
	switch *e.TimestamptzNullable {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c2.Scan(pgtype.Infinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c2.Scan(pgtype.NegativeInfinity); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	default:
		if err := c2.Scan(e.TimestamptzNullable); err != nil {
			return NewTimestampScannerStaticRow(nil).Err(err)
		}
	} // timestamptz_nullable
	return NewTimestampScannerStaticRow(q.QueryRowContext(ctx, query, c0, c1, c2))
}
